try:
    # Imports da interface moderna
    import customtkinter as ctk
    import tkinter as tk
    from tkinter import messagebox, filedialog
    import threading
    import time
    import json
    import os
    from datetime import datetime
    import subprocess
    import sys
    
    # Tentar importar psutil
    try:
        import psutil
        PSUTIL_AVAILABLE = True
    except ImportError:
        PSUTIL_AVAILABLE = False
        print("‚ö†Ô∏è psutil n√£o dispon√≠vel - monitoramento limitado")
    
    # Importar sistema de gerenciamento de mem√≥ria
    try:
        from src.memory_manager import memory_manager, performance_monitor
        MEMORY_MANAGER_AVAILABLE = True
    except ImportError:
        # Fallback se n√£o conseguir importar
        memory_manager = None
        performance_monitor = None
        MEMORY_MANAGER_AVAILABLE = False
        print("‚ö†Ô∏è Sistema de gerenciamento de mem√≥ria n√£o dispon√≠vel")
    
    # Imports locais
    try:
        from src.icons_config import get_icon, get_color, get_status_icon, get_control_button_config
        from src.utils import get_logger, ConfigManager, ValidationUtils
        from src.update_manager import UpdateManager
        ICONS_AVAILABLE = True
    except ImportError:
        ICONS_AVAILABLE = False
        print("‚ö†Ô∏è M√≥dulos locais n√£o dispon√≠veis - funcionalidade limitada")
        
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("Execute: pip install -r requirements.txt")
    sys.exit(1)

class ToolTip:
    """Classe para criar tooltips nos widgets"""
    
    def __init__(self, widget, text='Widget info'):
        self.widget = widget
        self.text = text
        self.tooltip = None
        self.widget.bind("<Enter>", self.on_enter)
        self.widget.bind("<Leave>", self.on_leave)
        
    def on_enter(self, event):
        """Mostra tooltip ao entrar com mouse"""
        x = self.widget.winfo_rootx() + 25
        y = self.widget.winfo_rooty() + 25
        
        self.tooltip = tk.Toplevel(self.widget)
        self.tooltip.wm_overrideredirect(True)
        self.tooltip.wm_geometry(f"+{x}+{y}")
        
        label = tk.Label(
            self.tooltip,
            text=self.text,
            justify='left',
            background='#2B2B2B',
            foreground='white',
            relief='solid',
            borderwidth=1,
            font=('Arial', 10, 'normal'),
            padx=8,
            pady=4
        )
        label.pack()
        
    def on_leave(self, event):
        """Esconde tooltip ao sair com mouse"""
        if self.tooltip:
            self.tooltip.destroy()
            self.tooltip = None

class ModernKeyDropGUI:
    def __init__(self):
        # Configurar tema escuro
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Janela principal
        self.root = ctk.CTk()
        self.root.title("üîë KeyDrop Bot - Professional Edition")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # Configurar √≠cone
        self.configurar_icone()
        
        # Vari√°veis de configura√ß√£o
        self.config = {
            'num_bots': 5,
            'velocidade_navegacao': 5,
            'headless': False,
            'login_mode': False,
            'contender_mode': False,
            'mini_window': False,
            'discord_webhook': '',
            'relatorios_automaticos': False
        }
        
        # Vari√°veis de controle
        self.bots = []
        self.running = False
        self.performance_thread = None
        self.report_manager = None
        self.stats_labels = []
        self.status_labels = []
        self.bot_frames = []
        self.pause_message = "‚è∏Ô∏è Bot pausado, aguardando pr√≥ximo sorteio (3min)"
        
        # Estat√≠sticas globais
        self.total_amateur = 0
        self.total_contender = 0
        self.total_erros = 0
        self.total_saldo = 0.0
        self.total_ganho = 0.0
        
        # Carregar configura√ß√µes (antes de criar interface)
        self.carregar_config()
        
        # Criar interface
        self.criar_interface_moderna()
        
        # Iniciar monitoramento de performance
        self.iniciar_monitoramento_performance()
        
        # Iniciar gerenciador de mem√≥ria
        if MEMORY_MANAGER_AVAILABLE and memory_manager:
            memory_manager.start()
            # Aguardar interface estar pronta antes de adicionar log
            self.root.after(1000, lambda: self.adicionar_log("üß† Sistema de gerenciamento de mem√≥ria iniciado"))
    
    def configurar_icone(self):
        """Configura o √≠cone da janela de forma robusta para execut√°veis"""
        try:
            # Lista de poss√≠veis localiza√ß√µes do √≠cone
            possiveis_caminhos = [
                # Mesmo diret√≥rio do script/execut√°vel
                os.path.join(os.path.dirname(__file__), 'bot-icone.ico'),
                os.path.join(os.path.dirname(__file__), 'bot-icone.png'),
                
                # Diret√≥rio atual
                os.path.join(os.getcwd(), 'bot-icone.ico'),
                os.path.join(os.getcwd(), 'bot-icone.png'),
                
                # Diret√≥rio pai (caso esteja em startup/)
                os.path.join(os.path.dirname(__file__), '..', 'bot-icone.ico'),
                os.path.join(os.path.dirname(__file__), '..', 'bot-icone.png'),
                
                # Para execut√°veis PyInstaller
                os.path.join(sys._MEIPASS if hasattr(sys, '_MEIPASS') else '.', 'bot-icone.ico'),
                os.path.join(sys._MEIPASS if hasattr(sys, '_MEIPASS') else '.', 'bot-icone.png'),
            ]
            
            # Tentar carregar o √≠cone de cada localiza√ß√£o
            for caminho in possiveis_caminhos:
                if os.path.exists(caminho):
                    try:
                        if caminho.endswith('.ico'):
                            self.root.iconbitmap(caminho)
                            print(f"‚úÖ √çcone ICO carregado de: {caminho}")
                            return
                        elif caminho.endswith('.png'):
                            icon_image = tk.PhotoImage(file=caminho)
                            self.root.iconphoto(True, icon_image)
                            print(f"‚úÖ √çcone PNG carregado de: {caminho}")
                            return
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao carregar √≠cone de {caminho}: {e}")
                        continue
            
            print("‚ö†Ô∏è Nenhum √≠cone encontrado, usando √≠cone padr√£o")
            
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o do √≠cone: {e}")
    
    def criar_interface_moderna(self):
        # Frame principal com padding
        main_frame = ctk.CTkFrame(self.root, corner_radius=15)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Cabe√ßalho
        self.criar_cabecalho(main_frame)
        
        # Frame de conte√∫do com scroll
        content_frame = ctk.CTkScrollableFrame(main_frame, height=600)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Se√ß√£o de configura√ß√µes
        self.criar_secao_configuracoes(content_frame)
        
        # Se√ß√£o de modos
        self.criar_secao_modos(content_frame)
        
        # Se√ß√£o de integra√ß√£o
        self.criar_secao_integracao(content_frame)
        
        # Se√ß√£o de controles
        self.criar_secao_controles(content_frame)
        
        # Se√ß√£o de monitoramento de guias
        self.criar_secao_monitoramento_guias(content_frame)
        
        # Se√ß√£o de estat√≠sticas
        self.criar_secao_estatisticas(content_frame)
        
        # Se√ß√£o de performance
        self.criar_secao_performance(content_frame)
        
        # Se√ß√£o de logs
        self.criar_secao_logs(content_frame)
    
    def criar_cabecalho(self, parent):
        header_frame = ctk.CTkFrame(parent, corner_radius=10)
        header_frame.pack(fill="x", padx=20, pady=10)
        
        # T√≠tulo com emoji
        title_label = ctk.CTkLabel(
            header_frame,
            text="üîë KeyDrop Bot Professional Edition",
            font=ctk.CTkFont(size=28, weight="bold")
        )
        title_label.pack(side="left", padx=20, pady=(15, 5))
        
        # Vers√£o no canto superior direito
        try:
            with open("version.json", "r") as f:
                version_data = json.load(f)
                version_text = f"v{version_data['version']}"
        except:
            version_text = "v4.0.0"
        
        version_label = ctk.CTkLabel(
            header_frame,
            text=version_text,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="green"
        )
        version_label.pack(side="right", padx=20, pady=(15, 5))
        
        # Cr√©ditos do desenvolvedor
        credits_label = ctk.CTkLabel(
            header_frame,
            text="üë®‚Äçüíª Desenvolvido por William Medrado (wmedrado)",
            font=ctk.CTkFont(size=14, weight="normal"),
            text_color="gray"
        )
        credits_label.pack(side="left", padx=20, pady=(0, 5))
        
        # Discord para contato
        discord_label = ctk.CTkLabel(
            header_frame,
            text="üí¨ Discord: wmedrado",
            font=ctk.CTkFont(size=12, weight="normal"),
            text_color="lightblue"
        )
        discord_label.pack(side="left", padx=20, pady=(0, 15))
        ToolTip(discord_label, "Entre em contato via Discord para suporte,\nbug reports ou sugest√µes de melhorias")
        
        # Status geral
        self.status_label = ctk.CTkLabel(
            header_frame,
            text="‚ö™ Parado",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.status_label.pack(side="right", padx=20, pady=15)
    
    def criar_secao_configuracoes(self, parent):
        # T√≠tulo da se√ß√£o
        config_title = ctk.CTkLabel(
            parent,
            text="‚öôÔ∏è Configura√ß√µes Principais",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        config_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de configura√ß√µes
        config_frame = ctk.CTkFrame(parent, corner_radius=10)
        config_frame.pack(fill="x", padx=10, pady=5)
        
        # Linha 1: Configura√ß√µes b√°sicas
        row1 = ctk.CTkFrame(config_frame)
        row1.pack(fill="x", padx=20, pady=15)
        
        # N√∫mero de janelas
        ctk.CTkLabel(row1, text="ü™ü Janelas:", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=5)
        self.num_bots_var = ctk.StringVar(value=str(self.config['num_bots']))
        self.num_bots_entry = ctk.CTkEntry(row1, textvariable=self.num_bots_var, width=80)
        self.num_bots_entry.pack(side="left", padx=5)
        ToolTip(self.num_bots_entry, "N√∫mero de janelas do navegador que ser√£o abertas\nRecomendado: 2-10 para testes, m√°ximo 200")
        
        # Velocidade de navega√ß√£o
        ctk.CTkLabel(row1, text="‚ö° Velocidade:", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 5))
        self.velocidade_var = ctk.StringVar(value=str(self.config['velocidade_navegacao']))
        self.velocidade_entry = ctk.CTkEntry(row1, textvariable=self.velocidade_var, width=80)
        self.velocidade_entry.pack(side="left", padx=5)
        ToolTip(self.velocidade_entry, "Velocidade de navega√ß√£o entre p√°ginas (segundos)\nMenor = mais r√°pido, maior = mais seguro")
        
        # Bot√£o de configura√ß√µes avan√ßadas
        config_btn = ctk.CTkButton(
            row1,
            text="üîß Avan√ßadas",
            command=self.abrir_configuracoes_avancadas,
            width=120
        )
        config_btn.pack(side="right", padx=5)
        ToolTip(config_btn, "Abre janela com configura√ß√µes avan√ßadas\ncomo proxy, user-agent, timeouts, etc.")
    
    def criar_secao_modos(self, parent):
        # T√≠tulo da se√ß√£o
        modos_title = ctk.CTkLabel(
            parent,
            text="üéÆ Modos de Opera√ß√£o",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        modos_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de modos
        modos_frame = ctk.CTkFrame(parent, corner_radius=10)
        modos_frame.pack(fill="x", padx=10, pady=5)
        
        # Linha de modos
        modos_row = ctk.CTkFrame(modos_frame)
        modos_row.pack(fill="x", padx=20, pady=15)
        
        # Headless
        self.headless_var = ctk.BooleanVar(value=self.config['headless'])
        self.headless_check = ctk.CTkCheckBox(
            modos_row,
            text="üëÅÔ∏è Headless (Oculto)",
            variable=self.headless_var,
            font=ctk.CTkFont(weight="bold")
        )
        self.headless_check.pack(side="left", padx=10)
        
        # Login autom√°tico
        self.login_var = ctk.BooleanVar(value=self.config['login_mode'])
        self.login_check = ctk.CTkCheckBox(
            modos_row,
            text="üîê Login Autom√°tico",
            variable=self.login_var,
            font=ctk.CTkFont(weight="bold")
        )
        self.login_check.pack(side="left", padx=10)
        
        # Modo CONTENDER
        self.contender_var = ctk.BooleanVar(value=self.config['contender_mode'])
        self.contender_check = ctk.CTkCheckBox(
            modos_row,
            text="üèÜ CONTENDER (1h)",
            variable=self.contender_var,
            font=ctk.CTkFont(weight="bold")
        )
        self.contender_check.pack(side="left", padx=10)
        
        # Mini Window
        self.mini_window_var = ctk.BooleanVar(value=self.config.get('mini_window', False))
        self.mini_window_check = ctk.CTkCheckBox(
            modos_row,
            text="ü™ü Mini Window (200x300)",
            variable=self.mini_window_var,
            font=ctk.CTkFont(weight="bold")
        )
        self.mini_window_check.pack(side="left", padx=10)
        
        # Tooltips
        ToolTip(self.headless_check, "Executa bots sem interface gr√°fica (mais r√°pido)")
        ToolTip(self.login_check, "Modo para fazer login manual na Steam")
        ToolTip(self.contender_check, "Modo otimizado para sorteios CONTENDER de 1 hora")
        ToolTip(self.mini_window_check, "Abre janelas em tamanho mini (200x300) para economia de recursos")
        
        # Bot√£o de ajuda
        help_btn = ctk.CTkButton(
            modos_row,
            text="‚ùì Ajuda",
            command=self.mostrar_ajuda_modos,
            width=100
        )
        help_btn.pack(side="right", padx=10)
    
    def criar_secao_integracao(self, parent):
        # T√≠tulo da se√ß√£o
        integracao_title = ctk.CTkLabel(
            parent,
            text="üîó Integra√ß√£o e Relat√≥rios",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        integracao_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de integra√ß√£o
        integracao_frame = ctk.CTkFrame(parent, corner_radius=10)
        integracao_frame.pack(fill="x", padx=10, pady=5)
        
        # Linha 1: Discord
        discord_row = ctk.CTkFrame(integracao_frame)
        discord_row.pack(fill="x", padx=20, pady=15)
        
        ctk.CTkLabel(discord_row, text="üì± Discord Webhook:", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=5)
        self.discord_var = ctk.StringVar(value=self.config['discord_webhook'])
        self.discord_entry = ctk.CTkEntry(discord_row, textvariable=self.discord_var, width=400)
        self.discord_entry.pack(side="left", padx=5, fill="x", expand=True)
        
        # Relat√≥rios autom√°ticos
        self.relatorios_var = ctk.BooleanVar(value=self.config['relatorios_automaticos'])
        self.relatorios_check = ctk.CTkCheckBox(
            discord_row,
            text="üìä Relat√≥rios (12h)",
            variable=self.relatorios_var,
            font=ctk.CTkFont(weight="bold")
        )
        self.relatorios_check.pack(side="right", padx=10)
    
    def criar_secao_controles(self, parent):
        # T√≠tulo da se√ß√£o
        controles_title = ctk.CTkLabel(
            parent,
            text="üéÆ Controles do Bot",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        controles_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de controles
        controles_frame = ctk.CTkFrame(parent, corner_radius=10)
        controles_frame.pack(fill="x", padx=10, pady=5)
        
        # Linha de bot√µes
        botoes_row = ctk.CTkFrame(controles_frame)
        botoes_row.pack(fill="x", padx=20, pady=15)
        
        # Bot√£o Iniciar
        self.btn_iniciar = ctk.CTkButton(
            botoes_row,
            text="‚ñ∂Ô∏è Iniciar Bots",
            command=self.iniciar_bots,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="green"
        )
        self.btn_iniciar.pack(side="left", padx=5)
        ToolTip(self.btn_iniciar, "Inicia os bots de acordo com as configura√ß√µes\ndefinidas (n√∫mero de bots, modo headless, etc.)")
        
        # Bot√£o Parar
        self.btn_parar = ctk.CTkButton(
            botoes_row,
            text="‚èπÔ∏è Parar Bots",
            command=self.parar_bots,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="red"
        )
        self.btn_parar.pack(side="left", padx=5)
        ToolTip(self.btn_parar, "Para todos os bots em execu√ß√£o\ne fecha suas janelas do navegador")
        
        # Bot√£o Parar Emerg√™ncia
        self.btn_parar_emergencia = ctk.CTkButton(
            botoes_row,
            text="üö® Stop Emerg√™ncia",
            command=self.parar_bots_emergencia,
            width=150,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="darkred"
        )
        self.btn_parar_emergencia.pack(side="left", padx=5)
        ToolTip(self.btn_parar_emergencia, "Encerra TODOS os processos Chrome do sistema\n(Use apenas se o bot√£o normal n√£o funcionar)")
        
        # Inicializar estado dos bot√µes
        self.btn_parar.configure(state="disabled")
        self.btn_parar_emergencia.configure(state="disabled")
        
        # Bot√£o Limpar Cache
        self.btn_limpar = ctk.CTkButton(
            botoes_row,
            text="üßπ Limpar Cache",
            command=self.limpar_cache,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="orange"
        )
        self.btn_limpar.pack(side="left", padx=5)
        ToolTip(self.btn_limpar, "Limpa o cache do navegador de todos os perfis\nsem perder os dados de login salvos")
        
        # Bot√£o Reiniciar Guias
        self.btn_reiniciar = ctk.CTkButton(
            botoes_row,
            text="üîÑ Reiniciar Guias",
            command=self.reiniciar_guias,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="purple"
        )
        self.btn_reiniciar.pack(side="left", padx=5)
        ToolTip(self.btn_reiniciar, "Reinicia todas as guias dos bots\n√ötil para resolver problemas de conex√£o")
        
        # Inicializar estado dos bot√µes
        self.btn_reiniciar.configure(state="disabled")
        
        # Bot√£o Salvar Config
        self.btn_salvar = ctk.CTkButton(
            botoes_row,
            text="üíæ Salvar Config",
            command=self.salvar_config,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="blue"
        )
        self.btn_salvar.pack(side="right", padx=5)
        ToolTip(self.btn_salvar, "Salva as configura√ß√µes atuais no arquivo\nbot_config.json para uso futuro")
        
        # Bot√£o Atualizar
        self.btn_atualizar = ctk.CTkButton(
            botoes_row,
            text="üîÑ Atualizar",
            command=self.verificar_atualizacao,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="purple"
        )
        self.btn_atualizar.pack(side="right", padx=5)
        ToolTip(self.btn_atualizar, "Verifica se h√° atualiza√ß√µes dispon√≠veis\ne instala automaticamente se encontrar")
    
    def criar_secao_estatisticas(self, parent):
        # T√≠tulo da se√ß√£o
        stats_title = ctk.CTkLabel(
            parent,
            text="üìä Estat√≠sticas em Tempo Real",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        stats_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(parent, corner_radius=10)
        stats_frame.pack(fill="x", padx=10, pady=5)
        
        # Grid de estat√≠sticas
        stats_grid = ctk.CTkFrame(stats_frame)
        stats_grid.pack(fill="x", padx=20, pady=15)
        
        # Linha 1: Estat√≠sticas gerais
        row1 = ctk.CTkFrame(stats_grid)
        row1.pack(fill="x", pady=5)
        
        self.stats_amateur = ctk.CTkLabel(row1, text="üéØ AMATEUR: 0", font=ctk.CTkFont(weight="bold"))
        self.stats_amateur.pack(side="left", padx=10)
        
        self.stats_contender = ctk.CTkLabel(row1, text="üèÜ CONTENDER: 0", font=ctk.CTkFont(weight="bold"))
        self.stats_contender.pack(side="left", padx=10)
        
        self.stats_erros = ctk.CTkLabel(row1, text="‚ùå Erros: 0", font=ctk.CTkFont(weight="bold"))
        self.stats_erros.pack(side="left", padx=10)
        
        # Linha 2: Saldo
        row2 = ctk.CTkFrame(stats_grid)
        row2.pack(fill="x", pady=5)
        
        self.stats_saldo = ctk.CTkLabel(row2, text="üí∞ Saldo em Skins: R$ 0,00", font=ctk.CTkFont(weight="bold"))
        self.stats_saldo.pack(side="left", padx=10)
        
        self.stats_ganho = ctk.CTkLabel(row2, text="üìà Ganho: R$ 0,00", font=ctk.CTkFont(weight="bold"))
        self.stats_ganho.pack(side="left", padx=10)
    
    def criar_secao_performance(self, parent):
        # T√≠tulo da se√ß√£o
        perf_title = ctk.CTkLabel(
            parent,
            text="‚ö° Performance do Sistema",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        perf_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de performance
        perf_frame = ctk.CTkFrame(parent, corner_radius=10)
        perf_frame.pack(fill="x", padx=10, pady=5)
        
        # Grid de performance
        perf_grid = ctk.CTkFrame(perf_frame)
        perf_grid.pack(fill="x", padx=20, pady=15)
        
        # Linha 1: CPU e RAM
        row1 = ctk.CTkFrame(perf_grid)
        row1.pack(fill="x", pady=5)
        
        self.perf_cpu = ctk.CTkLabel(row1, text="üñ•Ô∏è CPU: 0%", font=ctk.CTkFont(weight="bold"))
        self.perf_cpu.pack(side="left", padx=10)
        
        self.perf_ram = ctk.CTkLabel(row1, text="üêè RAM: 0%", font=ctk.CTkFont(weight="bold"))
        self.perf_ram.pack(side="left", padx=10)
        
        # Linha 2: Disco e Rede
        row2 = ctk.CTkFrame(perf_grid)
        row2.pack(fill="x", pady=5)
        
        self.perf_disco = ctk.CTkLabel(row2, text="üíæ Disco: 0%", font=ctk.CTkFont(weight="bold"))
        self.perf_disco.pack(side="left", padx=10)
        
        self.perf_rede = ctk.CTkLabel(row2, text="üåê Dados: 0.00 GB", font=ctk.CTkFont(weight="bold"))
        self.perf_rede.pack(side="left", padx=10)
        
        # Vari√°vel para rastrear consumo de dados
        self.dados_iniciais = None
    
    def criar_secao_logs(self, parent):
        # T√≠tulo da se√ß√£o
        logs_title = ctk.CTkLabel(
            parent,
            text="üìÑ Logs do Sistema",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        logs_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame de logs
        logs_frame = ctk.CTkFrame(parent, corner_radius=10)
        logs_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # √Årea de texto dos logs
        self.logs_text = ctk.CTkTextbox(logs_frame, height=200, font=ctk.CTkFont(family="Courier"))
        self.logs_text.pack(fill="both", expand=True, padx=20, pady=15)
        
        # Adicionar log inicial
        self.adicionar_log("üöÄ Sistema iniciado com sucesso!")
    
    def adicionar_log(self, mensagem):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_msg = f"[{timestamp}] {mensagem}\n"
        
        # Verificar se logs_text existe antes de usar
        if hasattr(self, 'logs_text') and self.logs_text:
            self.logs_text.insert("end", log_msg)
            self.logs_text.see("end")
        else:
            # Se logs_text n√£o existe, imprimir no console
            print(log_msg.strip())
    
    def carregar_config(self):
        """Carrega configura√ß√µes do arquivo JSON"""
        try:
            if os.path.exists('bot_config.json'):
                with open('bot_config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.config.update(config)
                    print("‚úÖ Configura√ß√µes carregadas com sucesso!")
            else:
                print("‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado, usando padr√µes")
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
    
    def atualizar_interface_com_config(self):
        """Atualiza os valores da interface com a configura√ß√£o carregada"""
        # Esta fun√ß√£o n√£o √© mais necess√°ria pois as configura√ß√µes 
        # s√£o carregadas antes da cria√ß√£o da interface
        pass
    
    def salvar_config(self):
        """Salva configura√ß√µes no arquivo JSON"""
        try:
            # Criar backup do arquivo atual se existir
            if os.path.exists('bot_config.json'):
                import shutil
                shutil.copy('bot_config.json', 'bot_config_backup.json')
            
            # Validar e atualizar configura√ß√µes com valores da interface
            config_atualizada = self.config.copy()
            
            # N√∫mero de janelas
            if hasattr(self, 'num_bots_var') and self.num_bots_var:
                try:
                    valor = int(self.num_bots_var.get())
                    if 1 <= valor <= 200:
                        config_atualizada['num_bots'] = valor
                    else:
                        raise ValueError("N√∫mero de janelas deve estar entre 1 e 200")
                except ValueError as e:
                    self.adicionar_log(f"‚ùå Erro no n√∫mero de janelas: {e}")
                    messagebox.showerror("Erro de Valida√ß√£o", f"N√∫mero de janelas inv√°lido: {e}")
                    return False
            
            # Velocidade de navega√ß√£o
            if hasattr(self, 'velocidade_var') and self.velocidade_var:
                try:
                    valor = int(self.velocidade_var.get())
                    if 1 <= valor <= 60:
                        config_atualizada['velocidade_navegacao'] = valor
                    else:
                        raise ValueError("Velocidade deve estar entre 1 e 60 segundos")
                except ValueError as e:
                    self.adicionar_log(f"‚ùå Erro na velocidade: {e}")
                    messagebox.showerror("Erro de Valida√ß√£o", f"Velocidade inv√°lida: {e}")
                    return False
            
            # Checkboxes (valores booleanos)
            if hasattr(self, 'headless_var') and self.headless_var:
                config_atualizada['headless'] = self.headless_var.get()
            
            if hasattr(self, 'login_var') and self.login_var:
                config_atualizada['login_mode'] = self.login_var.get()
            
            if hasattr(self, 'contender_var') and self.contender_var:
                config_atualizada['contender_mode'] = self.contender_var.get()
            
            if hasattr(self, 'mini_window_var') and self.mini_window_var:
                config_atualizada['mini_window'] = self.mini_window_var.get()
            
            if hasattr(self, 'relatorios_var') and self.relatorios_var:
                config_atualizada['relatorios_automaticos'] = self.relatorios_var.get()
            
            # Discord webhook
            if hasattr(self, 'discord_var') and self.discord_var:
                webhook_url = self.discord_var.get().strip()
                config_atualizada['discord_webhook'] = webhook_url
            
            # Salvar no arquivo com formata√ß√£o bonita
            with open('bot_config.json', 'w', encoding='utf-8') as f:
                json.dump(config_atualizada, f, indent=4, ensure_ascii=False)
            
            # Atualizar configura√ß√£o interna
            self.config = config_atualizada
            
            self.adicionar_log("üíæ Configura√ß√µes salvas com sucesso!")
            messagebox.showinfo("Sucesso", "Configura√ß√µes salvas com sucesso!\n\nAs altera√ß√µes ser√£o aplicadas na pr√≥xima execu√ß√£o do bot.")
            return True
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
            messagebox.showerror("Erro", f"Erro ao salvar configura√ß√µes:\n{e}")
            
            # Tentar restaurar backup se existir
            if os.path.exists('bot_config_backup.json'):
                try:
                    import shutil
                    shutil.copy('bot_config_backup.json', 'bot_config.json')
                    self.adicionar_log("üîÑ Backup restaurado")
                except:
                    pass
            
            return False
    
    def iniciar_bots(self):
        """Inicia os bots"""
        if self.running:
            messagebox.showwarning("Aviso", "Os bots j√° est√£o em execu√ß√£o!")
            return
        
        try:
            self.salvar_config()
            self.running = True
            self.status_label.configure(text="üü¢ Em execu√ß√£o")
            self.btn_iniciar.configure(state="disabled")
            self.btn_parar.configure(state="normal")
            self.btn_parar_emergencia.configure(state="normal")
            self.btn_reiniciar.configure(state="normal")
            
            # Iniciar bots em thread separada
            threading.Thread(target=self.executar_bots, daemon=True).start()
            
            self.adicionar_log("üöÄ Bots iniciados com sucesso!")
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro ao iniciar bots: {e}")
            messagebox.showerror("Erro", f"Erro ao iniciar bots: {e}")
    
    def executar_bots(self):
        """Executa os bots usando o BotManager"""
        try:
            # Importar BotManager
            from keydrop_bot import BotManager
            
            # Criar manager se n√£o existir
            if not hasattr(self, 'manager'):
                self.manager = BotManager()
            
            # Salvar configura√ß√£o no BotManager (incluindo velocidade_navegacao)
            self.manager.salvar_config(self.config)
            
            # Criar labels de status das guias
            self.root.after(0, self.criar_labels_status_guias)
            
            # Criar bots baseado na configura√ß√£o
            self.manager.criar_bots(
                self.config.get('num_bots', 2),
                self.config.get('headless', False),
                self.config.get('discord_webhook', '').strip() or None,
                self.config.get('login_mode', False),
                self.config.get('contender_mode', False),
                self.config.get('mini_window', False)
            )
            
            # Iniciar todos os bots (respeitar√° velocidade_navegacao)
            self.manager.iniciar_todos(self.config.get('intervalo_sorteios', 180))
            
            self.adicionar_log(f"üöÄ {self.config.get('num_bots', 2)} bots iniciados com sucesso!")
            self.adicionar_log(f"‚ö° Velocidade de navega√ß√£o: {self.config.get('velocidade_navegacao', 5)}s entre bots")
            
        except ImportError as e:
            self.adicionar_log(f"‚ùå Erro ao importar BotManager: {e}")
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro na execu√ß√£o: {e}")
            # Se houver erro, para os bots
            if self.running:
                self.root.after(0, self.parar_bots)
    
    def parar_bots(self):
        """Para os bots com encerramento melhorado"""
        try:
            if hasattr(self, 'manager'):
                self.adicionar_log("‚èπÔ∏è Iniciando parada dos bots...")
                self.manager.parar_todos()
                self.adicionar_log("‚úÖ Bots parados com sucesso!")
            else:
                self.adicionar_log("‚ö†Ô∏è Nenhum bot em execu√ß√£o")
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro ao parar bots: {e}")
        finally:
            self.running = False
            self.status_label.configure(text="üî¥ Parado")
            self.btn_iniciar.configure(state="normal")
            self.btn_parar.configure(state="disabled")
            self.btn_parar_emergencia.configure(state="disabled")
            self.btn_reiniciar.configure(state="disabled")
            
            # Limpar monitoramento de guias
            self.limpar_monitoramento_guias()
    
    def parar_bots_emergencia(self):
        """Para os bots com encerramento de emerg√™ncia"""
        try:
            if hasattr(self, 'manager'):
                self.adicionar_log("üö® Iniciando encerramento de emerg√™ncia...")
                processos_encerrados = self.manager.encerrar_chrome_emergencia()
                self.adicionar_log(f"üö® Encerramento de emerg√™ncia conclu√≠do: {processos_encerrados} processos Chrome encerrados")
            else:
                self.adicionar_log("‚ö†Ô∏è Nenhum bot em execu√ß√£o")
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro no encerramento de emerg√™ncia: {e}")
        finally:
            self.running = False
            self.status_label.configure(text="üî¥ Parado")
            self.btn_iniciar.configure(state="normal")
            self.btn_parar.configure(state="disabled")
            self.btn_parar_emergencia.configure(state="disabled")
            self.btn_reiniciar.configure(state="disabled")
            
            # Limpar monitoramento de guias
            self.limpar_monitoramento_guias()
    
    def limpar_monitoramento_guias(self):
        """Limpa o monitoramento de guias"""
        try:
            # Limpar conte√∫do do monitoramento
            if hasattr(self, 'bots_container'):
                for widget in self.bots_container.winfo_children():
                    widget.destroy()
            
            # Resetar listas
            self.bot_frames = []
            self.status_labels = []
            self.stats_labels = []
            self.saldo_labels = []
            self.tempo_labels = []
            self.error_labels = []
            self.status_icons = []
            
            # Resetar estat√≠sticas
            self.total_amateur = 0
            self.total_contender = 0
            self.total_erros = 0
            self.total_saldo = 0.0
            
            # Mostrar mensagem inicial
            if hasattr(self, 'bots_container'):
                self.status_inicial = ctk.CTkLabel(
                    self.bots_container,
                    text="üîÑ Aguardando inicializa√ß√£o dos bots...",
                    font=ctk.CTkFont(size=14),
                    text_color="gray"
                )
                self.status_inicial.pack(pady=50)
            
            # Resetar labels de estat√≠sticas
            self.stats_amateur.configure(text="üéØ AMATEUR: 0")
            self.stats_contender.configure(text="üèÜ CONTENDER: 0")
            self.stats_erros.configure(text="‚ùå Erros: 0")
            self.stats_saldo.configure(text="üí∞ Saldo em Skins: R$ 0,00")
            self.stats_ganho.configure(text="üìà Ganho: R$ 0,00")
            
        except Exception as e:
            print(f"Erro ao limpar monitoramento: {e}")
    
    def reiniciar_guias(self):
        """Reinicia todas as guias dos bots"""
        if not self.running:
            messagebox.showwarning("Aviso", "Nenhum bot em execu√ß√£o para reiniciar!")
            return
        
        try:
            # Confirmar a√ß√£o
            resultado = messagebox.askyesno(
                "Reiniciar Guias",
                "Isso ir√° reiniciar todas as guias dos bots.\n\n"
                "‚Ä¢ As guias ser√£o fechadas e abertas novamente\n"
                "‚Ä¢ Os logins ser√£o mantidos\n"
                "‚Ä¢ Pode levar alguns minutos para completar\n\n"
                "Deseja continuar?"
            )
            
            if not resultado:
                return
            
            # Desabilitar bot√£o
            self.btn_reiniciar.configure(state="disabled", text="üîÑ Reiniciando...")
            
            # Executar rein√≠cio em thread separada
            threading.Thread(target=self.executar_reinicio_guias, daemon=True).start()
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro ao reiniciar guias: {e}")
            messagebox.showerror("Erro", f"Erro ao reiniciar guias: {str(e)}")
    
    def executar_reinicio_guias(self):
        """Executa o rein√≠cio das guias"""
        try:
            if hasattr(self, 'manager') and hasattr(self.manager, 'reiniciar_guias'):
                self.manager.reiniciar_guias()
                self.adicionar_log("üîÑ Guias reiniciadas com sucesso!")
            else:
                self.adicionar_log("‚ö†Ô∏è Funcionalidade de rein√≠cio n√£o dispon√≠vel")
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro durante rein√≠cio: {e}")
            
        finally:
            # Reabilitar bot√£o
            self.root.after(0, self.finalizar_reinicio_guias)
    
    def finalizar_reinicio_guias(self):
        """Finaliza o processo de rein√≠cio"""
        try:
            self.btn_reiniciar.configure(state="normal", text="üîÑ Reiniciar Guias")
            messagebox.showinfo("Sucesso", "Guias reiniciadas com sucesso!")
        except Exception as e:
            print(f"Erro ao finalizar rein√≠cio: {e}")
    
    def limpar_cache(self):
        """Limpa o cache do navegador"""
        try:
            # Implementar limpeza de cache aqui
            self.adicionar_log("üßπ Iniciando limpeza de cache...")
            
            # Desabilitar bot√£o
            self.btn_limpar.configure(state="disabled", text="üßπ Limpando...")
            
            # Executar limpeza em thread separada
            threading.Thread(target=self.executar_limpeza_cache, daemon=True).start()
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro ao limpar cache: {e}")
            messagebox.showerror("Erro", f"Erro ao limpar cache: {e}")
    
    def executar_limpeza_cache(self):
        """Executa a limpeza de cache"""
        try:
            # Simular limpeza de cache
            time.sleep(2)  
            
            # Implementar limpeza real aqui se necess√°rio
            self.adicionar_log("‚úÖ Cache limpo com sucesso!")
            
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro durante limpeza: {e}")
            
        finally:
            # Reabilitar bot√£o
            self.root.after(0, self.finalizar_limpeza_cache)
    
    def finalizar_limpeza_cache(self):
        """Finaliza o processo de limpeza"""
        try:
            self.btn_limpar.configure(state="normal", text="üßπ Limpar Cache")
            messagebox.showinfo("Sucesso", "Cache limpo com sucesso!")
        except Exception as e:
            print(f"Erro ao finalizar limpeza: {e}")
    
    def iniciar_monitoramento_performance(self):
        """Inicia o monitoramento de performance"""
        def monitorar():
            while True:
                try:
                    # CPU
                    cpu_percent = psutil.cpu_percent(interval=1)
                    cpu_color = "green" if cpu_percent < 50 else "orange" if cpu_percent < 80 else "red"
                    self.perf_cpu.configure(text=f"üñ•Ô∏è CPU: {cpu_percent:.1f}%", text_color=cpu_color)
                    
                    # RAM
                    ram = psutil.virtual_memory()
                    ram_percent = ram.percent
                    ram_color = "green" if ram_percent < 60 else "orange" if ram_percent < 80 else "red"
                    self.perf_ram.configure(text=f"üêè RAM: {ram_percent:.1f}%", text_color=ram_color)
                    
                    # Disco
                    disk = psutil.disk_usage('/')
                    disk_percent = disk.percent
                    disk_color = "green" if disk_percent < 70 else "orange" if disk_percent < 90 else "red"
                    self.perf_disco.configure(text=f"üíæ Disco: {disk_percent:.1f}%", text_color=disk_color)
                    
                    # Rede - Mostrar consumo total em GB
                    net = psutil.net_io_counters()
                    if self.dados_iniciais is None:
                        self.dados_iniciais = net.bytes_sent + net.bytes_recv
                    
                    dados_consumidos = (net.bytes_sent + net.bytes_recv - self.dados_iniciais) / (1024**3)  # GB
                    self.perf_rede.configure(text=f"üåê Dados: {dados_consumidos:.2f} GB")
                    
                    time.sleep(3)
                except Exception as e:
                    print(f"Erro no monitoramento: {e}")
                    time.sleep(5)
        
        self.performance_thread = threading.Thread(target=monitorar, daemon=True)
        self.performance_thread.start()
    
    def abrir_configuracoes_avancadas(self):
        """Abre janela de configura√ß√µes avan√ßadas"""
        # Implementar janela de configura√ß√µes avan√ßadas
        messagebox.showinfo("Em breve", "Configura√ß√µes avan√ßadas ser√£o implementadas em breve!")
    
    def mostrar_ajuda_modos(self):
        """Mostra ajuda sobre os modos"""
        ajuda = """
üéÆ MODOS DE OPERA√á√ÉO:

üëÅÔ∏è Headless (Oculto):
‚Ä¢ Executa o navegador sem interface gr√°fica
‚Ä¢ Ideal para muitas janelas simult√¢neas
‚Ä¢ Menor consumo de recursos

üîê Login Autom√°tico:
‚Ä¢ Detecta automaticamente se precisa fazer login
‚Ä¢ Carrega p√°gina de login quando necess√°rio
‚Ä¢ Mant√©m sess√£o ativa

üèÜ CONTENDER (1h):
‚Ä¢ Participa de sorteios especiais de 1 hora
‚Ä¢ Funciona junto com sorteios normais (3min)
‚Ä¢ Prioridade: primeiro normais, depois CONTENDER

üì± Relat√≥rios (12h):
‚Ä¢ Envia relat√≥rios autom√°ticos via Discord
‚Ä¢ Estat√≠sticas detalhadas a cada 12 horas
‚Ä¢ Requer Discord Webhook configurado
        """
        messagebox.showinfo("Ajuda - Modos", ajuda)
    
    def verificar_atualizacao(self):
        """Verifica e aplica atualiza√ß√µes do bot (reposit√≥rio privado) - Vers√£o Melhorada"""
        try:
            # Importar ImprovedUpdateManager
            from src.improved_update_manager import ImprovedUpdateManager
            
            # Criar inst√¢ncia do ImprovedUpdateManager
            update_manager = ImprovedUpdateManager(
                repo_owner="wmedrado",
                repo_name="bot-keydrop",
                current_version="4.0.0"
            )
            
            # Usar o di√°logo melhorado
            self.adicionar_log("üîç Verificando atualiza√ß√µes...")
            update_manager.show_update_dialog(self.root)
            
        except ImportError as e:
            self.adicionar_log(f"‚ùå Erro ao importar sistema de atualiza√ß√µes: {e}")
            messagebox.showerror("Erro", f"Sistema de atualiza√ß√µes n√£o dispon√≠vel: {e}")
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro na verifica√ß√£o de atualiza√ß√µes: {e}")
            messagebox.showerror("Erro", f"Erro na verifica√ß√£o de atualiza√ß√µes: {e}")
    
    def run(self):
        """Executa a aplica√ß√£o"""
        self.root.mainloop()
    
    def criar_secao_monitoramento_guias(self, parent):
        """Cria se√ß√£o de monitoramento das guias com layout horizontal em quadradinhos"""
        # T√≠tulo da se√ß√£o
        monitor_title = ctk.CTkLabel(
            parent,
            text="üîç Monitoramento de Guias",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        monitor_title.pack(anchor="w", padx=10, pady=(20, 10))
        
        # Frame principal do monitoramento
        monitor_frame = ctk.CTkFrame(parent, corner_radius=10)
        monitor_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Frame com scroll horizontal para os quadradinhos
        self.guias_scroll_frame = ctk.CTkScrollableFrame(
            monitor_frame, 
            height=280,
            orientation="horizontal"
        )
        self.guias_scroll_frame.pack(fill="both", expand=True, padx=20, pady=15)
        
        # Container horizontal para os quadradinhos
        self.bots_container = ctk.CTkFrame(self.guias_scroll_frame, fg_color="transparent")
        self.bots_container.pack(fill="both", expand=True)
        
        # Mensagem inicial
        self.status_inicial = ctk.CTkLabel(
            self.bots_container,
            text="üîÑ Aguardando inicializa√ß√£o dos bots...",
            font=ctk.CTkFont(size=14),
            text_color="gray"
        )
        self.status_inicial.pack(pady=50)
        
        # Inicializar listas
        self.bot_frames = []
        self.status_labels = []
        self.stats_labels = []
        self.saldo_labels = []
        self.tempo_labels = []
        self.error_labels = []
        self.status_icons = []
        
        # Iniciar thread de atualiza√ß√£o
        self.iniciar_update_loop()
    
    def criar_labels_status_guias(self):
        """Cria os quadradinhos de status para cada guia"""
        # Limpar conte√∫do anterior
        for widget in self.bots_container.winfo_children():
            widget.destroy()
        
        # Resetar listas
        self.bot_frames = []
        self.status_labels = []
        self.stats_labels = []
        self.saldo_labels = []
        self.tempo_labels = []
        self.error_labels = []
        self.status_icons = []
        
        # Criar quadradinho para cada bot
        for i in range(self.config.get('num_bots', 2)):
            # Frame principal do bot (quadradinho)
            bot_frame = ctk.CTkFrame(
                self.bots_container, 
                width=280, 
                height=220,
                corner_radius=10,
                fg_color=("gray90", "gray20")
            )
            bot_frame.pack(side="left", padx=10, pady=5)
            bot_frame.pack_propagate(False)  # Manter tamanho fixo
            self.bot_frames.append(bot_frame)
            
            # Header do bot com √≠cone de status
            header_frame = ctk.CTkFrame(bot_frame, fg_color="transparent", height=40)
            header_frame.pack(fill="x", padx=10, pady=(10, 5))
            header_frame.pack_propagate(False)
            
            # √çcone de status
            status_icon = ctk.CTkLabel(
                header_frame,
                text="üî¥",  # Vermelho = inativo, üü¢ = ativo, ÔøΩ = processando
                font=ctk.CTkFont(size=20),
                width=30
            )
            status_icon.pack(side="left", padx=(0, 10))
            self.status_icons.append(status_icon)
            
            # Nome do bot
            bot_name = ctk.CTkLabel(
                header_frame,
                text=f"Bot {i+1}",
                font=ctk.CTkFont(size=16, weight="bold"),
                anchor="w"
            )
            bot_name.pack(side="left", fill="x", expand=True)
            
            # Status do bot
            status_label = ctk.CTkLabel(
                header_frame,
                text="üîÑ Inicializando...",
                font=ctk.CTkFont(size=10),
                text_color="gray",
                anchor="e"
            )
            status_label.pack(side="right")
            self.status_labels.append(status_label)
            
            # Se√ß√£o de dados do sorteio
            sorteio_frame = ctk.CTkFrame(bot_frame, fg_color="transparent", height=80)
            sorteio_frame.pack(fill="x", padx=10, pady=5)
            sorteio_frame.pack_propagate(False)
            
            # T√≠tulo da se√ß√£o
            sorteio_title = ctk.CTkLabel(
                sorteio_frame,
                text="üìä Dados do Sorteio",
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color="cyan"
            )
            sorteio_title.pack(anchor="w", pady=(0, 5))
            
            # Estat√≠sticas detalhadas
            stats_label = ctk.CTkLabel(
                sorteio_frame,
                text="üéØ AMATEUR: 0\nüèÜ CONTENDER: 0\n‚è±Ô∏è Tempo: 00:00:00",
                font=ctk.CTkFont(size=10),
                text_color="lightgray",
                anchor="w",
                justify="left"
            )
            stats_label.pack(anchor="w", fill="x")
            self.stats_labels.append(stats_label)
            
            # Saldo
            saldo_label = ctk.CTkLabel(
                sorteio_frame,
                text="üí∞ R$ 0,00",
                font=ctk.CTkFont(size=11, weight="bold"),
                text_color="green",
                anchor="e"
            )
            saldo_label.pack(anchor="e", pady=(5, 0))
            self.saldo_labels.append(saldo_label)
            
            # Se√ß√£o de erros
            error_frame = ctk.CTkFrame(bot_frame, fg_color="transparent", height=60)
            error_frame.pack(fill="x", padx=10, pady=(0, 10))
            error_frame.pack_propagate(False)
            
            # T√≠tulo da se√ß√£o de erros
            error_title = ctk.CTkLabel(
                error_frame,
                text="‚ö†Ô∏è Erros",
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color="orange"
            )
            error_title.pack(anchor="w", pady=(0, 5))
            
            # Label de erros
            error_label = ctk.CTkLabel(
                error_frame,
                text="‚úÖ Nenhum erro",
                font=ctk.CTkFont(size=10),
                text_color="green",
                anchor="w",
                justify="left"
            )
            error_label.pack(anchor="w", fill="both", expand=True)
            self.error_labels.append(error_label)
            
            # Placeholder para tempo (ser√° usado no stats_label)
            self.tempo_labels.append(None)
            self.saldo_labels.append(saldo_label)
    
    def iniciar_update_loop(self):
        """Inicia o loop de atualiza√ß√£o de status"""
        def atualizar_periodicamente():
            while True:
                try:
                    # Atualizar status das guias
                    self.atualizar_status_guias()
                    
                    # Atualizar estat√≠sticas globais
                    self.atualizar_estatisticas_globais()
                    
                    # Pausa de 1 segundo
                    time.sleep(1)
                    
                except Exception as e:
                    print(f"Erro no update loop: {e}")
                    time.sleep(5)
        
        # Iniciar thread de atualiza√ß√£o
        update_thread = threading.Thread(target=atualizar_periodicamente, daemon=True)
        update_thread.start()
    
    def atualizar_status_guias(self):
        """Atualiza o status de cada guia"""
        try:
            if not self.running or not hasattr(self, 'manager'):
                return
            
            # Verificar se os labels existem
            if not self.status_labels:
                return
            
            # Obter estat√≠sticas do manager
            if hasattr(self.manager, 'obter_stats_todos'):
                stats = self.manager.obter_stats_todos()
                
                for i, stat in enumerate(stats):
                    if i < len(self.status_labels):
                        bot_id = stat['bot_id']
                        bot_stats = stat['stats']
                        ativo = stat['ativo']
                        
                        # Atualizar status
                        if ativo:
                            # Verificar se est√° em pausa
                            if bot_stats.get('pausado', False):
                                status_text = f"Bot {bot_id}: {self.pause_message}"
                                cor = "orange"
                            else:
                                status_text = f"Bot {bot_id}: üü¢ Ativo"
                                cor = "green"
                        else:
                            status_text = f"Bot {bot_id}: üî¥ Inativo"
                            cor = "red"
                        
                        # Atualizar via thread principal
                        self.root.after(0, lambda i=i, text=status_text, color=cor: 
                                       self.status_labels[i].configure(text=text, text_color=color))
                        
                        # Calcular tempo de execu√ß√£o
                        tempo_exec = "00:00:00"
                        if bot_stats.get('inicio'):
                            try:
                                delta = datetime.now() - bot_stats['inicio']
                                horas = delta.seconds // 3600
                                minutos = (delta.seconds % 3600) // 60
                                segundos = delta.seconds % 60
                                tempo_exec = f"{horas:02d}:{minutos:02d}:{segundos:02d}"
                            except:
                                tempo_exec = "00:00:00"
                        
                        # Atualizar tempo
                        self.root.after(0, lambda i=i, tempo=tempo_exec: 
                                       self.tempo_labels[i].configure(text=f"‚è±Ô∏è {tempo}"))
                        
                        # Atualizar estat√≠sticas
                        amateur = bot_stats.get('amateur', 0)
                        contender = bot_stats.get('contender', 0)
                        erros = bot_stats.get('erros', 0)
                        
                        stats_text = f"üéØ AMATEUR: {amateur} | üèÜ CONTENDER: {contender} | ‚ùå Erros: {erros}"
                        self.root.after(0, lambda i=i, text=stats_text: 
                                       self.stats_labels[i].configure(text=text))
                        
                        # Atualizar saldo
                        saldo = bot_stats.get('saldo', 0.0)
                        saldo_text = f"üí∞ R$ {saldo:.2f}"
                        self.root.after(0, lambda i=i, text=saldo_text: 
                                       self.saldo_labels[i].configure(text=text))
                        
        except Exception as e:
            print(f"Erro ao atualizar status das guias: {e}")
    
    def atualizar_estatisticas_globais(self):
        """Atualiza as estat√≠sticas globais baseadas nos bots individuais"""
        try:
            if not self.running or not hasattr(self, 'manager'):
                return
            
            # Resetar totais
            self.total_amateur = 0
            self.total_contender = 0
            self.total_erros = 0
            self.total_saldo = 0.0
            
            # Obter estat√≠sticas do manager
            if hasattr(self.manager, 'obter_stats_todos'):
                stats = self.manager.obter_stats_todos()
                
                for stat in stats:
                    bot_stats = stat['stats']
                    self.total_amateur += bot_stats.get('amateur', 0)
                    self.total_contender += bot_stats.get('contender', 0)
                    self.total_erros += bot_stats.get('erros', 0)
                    self.total_saldo += bot_stats.get('saldo', 0.0)
                    
                    # Debug para verificar se est√° pegando as participa√ß√µes
                    if bot_stats.get('amateur', 0) > 0 or bot_stats.get('contender', 0) > 0:
                        print(f"Bot {stat['bot_id']}: AMATEUR={bot_stats.get('amateur', 0)}, CONTENDER={bot_stats.get('contender', 0)}")
            
            # Atualizar labels das estat√≠sticas
            self.root.after(0, lambda: self.stats_amateur.configure(text=f"üéØ AMATEUR: {self.total_amateur}"))
            self.root.after(0, lambda: self.stats_contender.configure(text=f"üèÜ CONTENDER: {self.total_contender}"))
            self.root.after(0, lambda: self.stats_erros.configure(text=f"‚ùå Erros: {self.total_erros}"))
            self.root.after(0, lambda: self.stats_saldo.configure(text=f"üí∞ Saldo em Skins: R$ {self.total_saldo:.2f}"))
            
        except Exception as e:
            print(f"Erro ao atualizar estat√≠sticas globais: {e}")
    
    def atualizar_status_visual_bot(self, bot_index, status, stats_data=None, error_msg=None):
        """Atualiza o status visual de um bot espec√≠fico"""
        try:
            if bot_index >= len(self.status_icons):
                return
            
            # Atualizar √≠cone de status
            if status == "ativo":
                self.status_icons[bot_index].configure(text="üü¢")
                self.status_labels[bot_index].configure(
                    text="‚úÖ Ativo",
                    text_color="green"
                )
            elif status == "processando":
                self.status_icons[bot_index].configure(text="üü°")
                self.status_labels[bot_index].configure(
                    text="üîÑ Processando",
                    text_color="orange"
                )
            elif status == "erro":
                self.status_icons[bot_index].configure(text="üî¥")
                self.status_labels[bot_index].configure(
                    text="‚ùå Erro",
                    text_color="red"
                )
            elif status == "pausado":
                self.status_icons[bot_index].configure(text="‚è∏Ô∏è")
                self.status_labels[bot_index].configure(
                    text="‚è∏Ô∏è Pausado",
                    text_color="gray"
                )
            else:
                self.status_icons[bot_index].configure(text="üî¥")
                self.status_labels[bot_index].configure(
                    text="üîÑ Inicializando",
                    text_color="gray"
                )
            
            # Atualizar estat√≠sticas se fornecidas
            if stats_data:
                amateur = stats_data.get('amateur', 0)
                contender = stats_data.get('contender', 0)
                tempo = stats_data.get('tempo', '00:00:00')
                saldo = stats_data.get('saldo', 0.0)
                
                self.stats_labels[bot_index].configure(
                    text=f"üéØ AMATEUR: {amateur}\nüèÜ CONTENDER: {contender}\n‚è±Ô∏è Tempo: {tempo}"
                )
                
                self.saldo_labels[bot_index].configure(
                    text=f"üí∞ R$ {saldo:.2f}"
                )
            
            # Atualizar mensagem de erro
            if error_msg:
                self.error_labels[bot_index].configure(
                    text=f"‚ùå {error_msg}",
                    text_color="red"
                )
            else:
                self.error_labels[bot_index].configure(
                    text="‚úÖ Nenhum erro",
                    text_color="green"
                )
                
        except Exception as e:
            print(f"Erro ao atualizar status visual do bot {bot_index}: {e}")

if __name__ == "__main__":
    app = ModernKeyDropGUI()
    app.run()
