"""
KeyDrop Bot - Production Launcher
=================================

Script de produ√ß√£o para iniciar o KeyDrop Bot com todas as otimiza√ß√µes.
Garante que o ambiente esteja configurado corretamente antes de iniciar.
"""

import os
import sys
import time
import subprocess
import json
from datetime import datetime

def print_banner():
    """Exibe o banner do bot"""
    # Carregar vers√£o do arquivo version.json
    try:
        with open("version.json", "r") as f:
            version_data = json.load(f)
            version = version_data["version"]
    except:
        version = "2.0.7"
    
    print(f"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë               KeyDrop Bot - Professional Edition             ‚ïë
    ‚ïë                          v{version}                              ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë                   Desenvolvido por William Medrado              ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def verificar_python():
    """Verifica se Python est√° dispon√≠vel"""
    try:
        version = sys.version_info
        if version.major >= 3 and version.minor >= 8:
            print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
            return True
        else:
            print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Vers√£o muito antiga")
            print("   Necess√°rio Python 3.8 ou superior")
            return False
    except:
        print("‚ùå Erro ao verificar vers√£o do Python")
        return False

def verificar_arquivos_principais():
    """Verifica se os arquivos principais existem"""
    arquivos = ["modern_gui.py", "keydrop_bot.py", "requirements.txt", "version.json"]
    
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} - OK")
        else:
            print(f"‚ùå {arquivo} - FALTANDO")
            return False
    
    return True

def instalar_dependencias():
    """Instala depend√™ncias se necess√°rio"""
    print("üîß Verificando depend√™ncias...")
    
    try:
        # Tenta importar as principais depend√™ncias
        import selenium
        import requests
        import psutil
        print("‚úÖ Depend√™ncias j√° instaladas")
        return True
    except ImportError:
        print("‚ö†Ô∏è Instalando depend√™ncias...")
        try:
            # Primeiro, atualiza pip
            subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
            
            # Instala depend√™ncias com vers√µes flex√≠veis
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt", "--upgrade"])
            print("‚úÖ Depend√™ncias instaladas com sucesso")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            print("üîß Tentando instala√ß√£o individual...")
            
            # Lista de depend√™ncias essenciais
            deps_essenciais = [
                "selenium>=4.15.0",
                "webdriver-manager>=4.0.0",
                "requests>=2.31.0",
                "psutil>=5.9.0",
                "pillow>=10.0.0",
                "colorama>=0.4.0"
            ]
            
            # Tenta instalar uma por uma
            for dep in deps_essenciais:
                try:
                    subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
                    print(f"‚úÖ {dep} instalado")
                except subprocess.CalledProcessError:
                    print(f"‚ö†Ô∏è Falha ao instalar {dep} - continuando...")
            
            # Tenta instalar pywin32 espec√≠fico para Windows
            if sys.platform == "win32":
                try:
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "pywin32"])
                    print("‚úÖ pywin32 instalado")
                except subprocess.CalledProcessError:
                    print("‚ö†Ô∏è pywin32 n√£o instalado - algumas funcionalidades podem n√£o funcionar")
            
            return True

def verificar_chrome():
    """Verifica se Chrome est√° instalado"""
    chrome_paths = [
        "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
        "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
        "C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"
    ]
    
    for path in chrome_paths:
        expanded_path = os.path.expandvars(path)
        if os.path.exists(expanded_path):
            print("‚úÖ Google Chrome encontrado")
            return True
    
    print("‚ùå Google Chrome n√£o encontrado")
    print("   Instale o Google Chrome antes de continuar")
    return False

def criar_diretorios_necessarios():
    """Cria diret√≥rios necess√°rios"""
    diretorios = ["profiles", "data", "backup"]
    
    for diretorio in diretorios:
        if not os.path.exists(diretorio):
            os.makedirs(diretorio)
            print(f"‚úÖ Diret√≥rio '{diretorio}' criado")
        else:
            print(f"‚úÖ Diret√≥rio '{diretorio}' - OK")

def executar_otimizacao():
    """Executa otimiza√ß√£o se dispon√≠vel"""
    if os.path.exists("final_optimizer.py"):
        print("üöÄ Executando otimiza√ß√µes...")
        try:
            subprocess.run([sys.executable, "final_optimizer.py"], check=True)
            return True
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è Erro na otimiza√ß√£o - continuando mesmo assim")
            return False
    else:
        print("‚ö†Ô∏è Otimizador n√£o encontrado - continuando mesmo assim")
        return False

def iniciar_bot():
    """Inicia o bot principal"""
    print("\nüöÄ Iniciando KeyDrop Bot...")
    print("=" * 50)
    
    try:
        # Inicia o bot com interface moderna
        subprocess.run([sys.executable, "modern_gui.py"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao iniciar o bot")
        return False
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Bot interrompido pelo usu√°rio")
        return True
    
    return True

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    print("üîç Verificando ambiente...")
    print("=" * 50)
    
    # Verifica√ß√µes de pr√©-requisitos
    verificacoes = [
        ("Python", verificar_python),
        ("Arquivos principais", verificar_arquivos_principais),
        ("Google Chrome", verificar_chrome),
        ("Depend√™ncias", instalar_dependencias)
    ]
    
    for nome, funcao in verificacoes:
        print(f"\n{nome}:")
        if not funcao():
            print(f"\n‚ùå Falha na verifica√ß√£o: {nome}")
            print("üõ†Ô∏è Corrija o problema e tente novamente")
            input("Pressione Enter para sair...")
            return False
    
    # Prepara√ß√£o do ambiente
    print("\nüõ†Ô∏è Preparando ambiente...")
    print("=" * 50)
    
    criar_diretorios_necessarios()
    executar_otimizacao()
    
    # Iniciar bot
    print("\n‚úÖ Ambiente preparado com sucesso!")
    print("üéØ Iniciando KeyDrop Bot...")
    
    # Aguarda 3 segundos para o usu√°rio ler
    for i in range(3, 0, -1):
        print(f"Iniciando em {i}...")
        time.sleep(1)
    
    return iniciar_bot()

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)
