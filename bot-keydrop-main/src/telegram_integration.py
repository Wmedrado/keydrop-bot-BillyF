#!/usr/bin/env python3
"""
Sistema de Integra√ß√£o com Telegram Bot - KeyDrop Bot Professional Edition
Controle remoto e relat√≥rios via Telegram
"""

import asyncio
import json
import time
import threading
import requests
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import os
import sqlite3

class TelegramBot:
    """Bot do Telegram para controle remoto do KeyDrop Bot"""
    
    def __init__(self, token: str = "7900120898:AAGptz6a39S866Qa42KdcXDRdi9AoXc6_Ps", bot_manager=None):
        self.token = token
        self.bot_manager = bot_manager
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.authorized_users = []  # Lista de usu√°rios autorizados
        self.running = False
        self.thread = None
        self.last_update_id = 0
        
        # Configura√ß√µes
        self.config = {
            'reports_enabled': True,
            'weekly_reports': True,
            'monthly_reports': True,
            'status_notifications': True,
            'authorized_chat_ids': []
        }
        
        # Banco de dados para estat√≠sticas
        self.init_database()
        
    def init_database(self):
        """Inicializa banco de dados para estat√≠sticas"""
        try:
            self.db_path = "telegram_stats.db"
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Tabela de estat√≠sticas di√°rias
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS daily_stats (
                    date TEXT PRIMARY KEY,
                    ip_address TEXT,
                    total_joins INTEGER DEFAULT 0,
                    total_errors INTEGER DEFAULT 0,
                    total_profit REAL DEFAULT 0.0,
                    current_balance REAL DEFAULT 0.0,
                    avg_ram_usage REAL DEFAULT 0.0,
                    avg_cpu_usage REAL DEFAULT 0.0,
                    max_bots_running INTEGER DEFAULT 0,
                    total_data_gb REAL DEFAULT 0.0,
                    guias_reiniciadas INTEGER DEFAULT 0
                )
            ''')
            
            # Tabela de eventos
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT,
                    event_type TEXT,
                    description TEXT,
                    data TEXT
                )
            ''')
            
            conn.commit()
            conn.close()
            print("üìä Banco de dados Telegram inicializado")
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar banco Telegram: {e}")
    
    def get_my_ip(self):
        """Obt√©m IP p√∫blico"""
        try:
            response = requests.get('https://httpbin.org/ip', timeout=5)
            return response.json().get('origin', 'IP n√£o dispon√≠vel')
        except:
            try:
                response = requests.get('https://ipinfo.io/ip', timeout=5)
                return response.text.strip()
            except:
                return 'IP n√£o dispon√≠vel'
    
    def save_daily_stats(self, stats: Dict):
        """Salva estat√≠sticas di√°rias"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            today = datetime.now().strftime('%Y-%m-%d')
            ip_address = self.get_my_ip()
            
            cursor.execute('''
                INSERT OR REPLACE INTO daily_stats 
                (date, ip_address, total_joins, total_errors, total_profit, 
                current_balance, avg_ram_usage, avg_cpu_usage, max_bots_running, 
                total_data_gb, guias_reiniciadas)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                today, ip_address, stats.get('total_joins', 0),
                stats.get('total_errors', 0), stats.get('total_profit', 0.0),
                stats.get('current_balance', 0.0), stats.get('avg_ram_usage', 0.0),
                stats.get('avg_cpu_usage', 0.0), stats.get('max_bots_running', 0),
                stats.get('total_data_gb', 0.0), stats.get('guias_reiniciadas', 0)
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar estat√≠sticas di√°rias: {e}")
    
    def log_event(self, event_type: str, description: str, data: str = ""):
        """Registra evento no banco"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            timestamp = datetime.now().isoformat()
            cursor.execute('''
                INSERT INTO events (timestamp, event_type, description, data)
                VALUES (?, ?, ?, ?)
            ''', (timestamp, event_type, description, data))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Erro ao registrar evento: {e}")
    
    def start(self):
        """Inicia o bot do Telegram"""
        if not self.running:
            self.running = True
            self.thread = threading.Thread(target=self._run_bot, daemon=True)
            self.thread.start()
            print("ü§ñ Telegram Bot iniciado")
            self.log_event("bot_start", "Telegram Bot iniciado")
    
    def stop(self):
        """Para o bot do Telegram"""
        self.running = False
        if self.thread:
            self.thread.join(timeout=5)
        print("üõë Telegram Bot parado")
        self.log_event("bot_stop", "Telegram Bot parado")
    
    def _run_bot(self):
        """Loop principal do bot"""
        while self.running:
            try:
                self._poll_updates()
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå Erro no loop do Telegram Bot: {e}")
                time.sleep(5)
    
    def _poll_updates(self):
        """Verifica atualiza√ß√µes do Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {
                'offset': self.last_update_id + 1,
                'timeout': 10,
                'limit': 100
            }
            
            response = requests.get(url, params=params, timeout=15)
            if response.status_code == 200:
                data = response.json()
                if data['ok']:
                    for update in data['result']:
                        self.last_update_id = update['update_id']
                        self._handle_update(update)
                        
        except Exception as e:
            print(f"‚ùå Erro ao verificar updates: {e}")
    
    def _handle_update(self, update: Dict):
        """Processa atualiza√ß√£o do Telegram"""
        try:
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')
                user_id = message['from']['id']
                username = message['from'].get('username', 'Usu√°rio')
                
                # Log da mensagem
                self.log_event("message_received", f"Mensagem de {username}: {text}", str(chat_id))
                
                # Processar comando
                self._handle_command(chat_id, text, user_id, username)
                
        except Exception as e:
            print(f"‚ùå Erro ao processar update: {e}")
    
    def _handle_command(self, chat_id: int, text: str, user_id: int, username: str):
        """Processa comandos do Telegram"""
        try:
            text = text.strip().lower()
            
            # Comando de in√≠cio/autoriza√ß√£o
            if text == '/start':
                self._send_welcome(chat_id, username)
                return
            
            # Verificar autoriza√ß√£o (primeira vez autoriza automaticamente)
            if not self._is_authorized(chat_id):
                self._authorize_user(chat_id, user_id, username)
                return
            
            # Comandos dispon√≠veis
            if text == '/status':
                self._send_status(chat_id)
            elif text == '/iniciar':
                self._start_bots(chat_id)
            elif text == '/parar':
                self._stop_bots(chat_id)
            elif text == '/reiniciar':
                self._restart_bots(chat_id)
            elif text == '/relatorio':
                self._send_report(chat_id)
            elif text == '/relatorio_semanal':
                self._send_weekly_report(chat_id)
            elif text == '/relatorio_mensal':
                self._send_monthly_report(chat_id)
            elif text == '/stats':
                self._send_detailed_stats(chat_id)
            elif text == '/help' or text == '/ajuda':
                self._send_help(chat_id)
            elif text == '/emergencia':
                self._emergency_stop(chat_id)
            else:
                self._send_unknown_command(chat_id)
                
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao processar comando: {e}")
    
    def _is_authorized(self, chat_id: int) -> bool:
        """Verifica se usu√°rio est√° autorizado"""
        return chat_id in self.config['authorized_chat_ids']
    
    def _authorize_user(self, chat_id: int, user_id: int, username: str):
        """Autoriza usu√°rio (primeira vez √© autom√°tica)"""
        if chat_id not in self.config['authorized_chat_ids']:
            self.config['authorized_chat_ids'].append(chat_id)
            self._save_config()
            
            message = f"üîê Usu√°rio @{username} autorizado!\n\n"
            message += "Digite /help para ver comandos dispon√≠veis."
            self.send_message(chat_id, message)
            
            self.log_event("user_authorized", f"Usu√°rio {username} autorizado", str(chat_id))
    
    def _send_welcome(self, chat_id: int, username: str):
        """Envia mensagem de boas-vindas"""
        message = f"ü§ñ **KeyDrop Bot Professional Edition v2.0.9**\n\n"
        message += f"Ol√° @{username}! Bem-vindo ao controle remoto do KeyDrop Bot.\n\n"
        message += "üîê Autorizando acesso...\n"
        message += "Digite /help para ver comandos dispon√≠veis."
        
        self.send_message(chat_id, message)
    
    def _send_help(self, chat_id: int):
        """Envia lista de comandos"""
        message = "üÜò **Comandos Dispon√≠veis:**\n\n"
        message += "üè† **Controle B√°sico:**\n"
        message += "/status - Status atual do sistema\n"
        message += "/iniciar - Iniciar todos os bots\n"
        message += "/parar - Parar todos os bots\n"
        message += "/reiniciar - Reiniciar todos os bots\n"
        message += "/emergencia - Parada emergencial\n\n"
        
        message += "üìä **Relat√≥rios:**\n"
        message += "/relatorio - Relat√≥rio detalhado atual\n"
        message += "/relatorio_semanal - Relat√≥rio da semana\n"
        message += "/relatorio_mensal - Relat√≥rio do m√™s\n"
        message += "/stats - Estat√≠sticas detalhadas\n\n"
        
        message += "‚ÑπÔ∏è **Outros:**\n"
        message += "/help - Esta mensagem\n"
        
        self.send_message(chat_id, message)
    
    def _start_bots(self, chat_id: int):
        """Inicia todos os bots"""
        try:
            if self.bot_manager:
                # Simular in√≠cio dos bots
                message = "üöÄ **Iniciando todos os bots...**\n\n"
                message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
                message += f"üìç IP: {self.get_my_ip()}\n"
                message += "‚úÖ Comando executado com sucesso!"
                
                self.send_message(chat_id, message)
                self.log_event("bots_started", "Bots iniciados via Telegram", str(chat_id))
            else:
                self.send_message(chat_id, "‚ùå Bot Manager n√£o dispon√≠vel")
                
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao iniciar bots: {e}")
    
    def _stop_bots(self, chat_id: int):
        """Para todos os bots"""
        try:
            if self.bot_manager:
                message = "‚èπÔ∏è **Parando todos os bots...**\n\n"
                message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
                message += f"üìç IP: {self.get_my_ip()}\n"
                message += "‚úÖ Comando executado com sucesso!"
                
                self.send_message(chat_id, message)
                self.log_event("bots_stopped", "Bots parados via Telegram", str(chat_id))
            else:
                self.send_message(chat_id, "‚ùå Bot Manager n√£o dispon√≠vel")
                
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao parar bots: {e}")
    
    def _restart_bots(self, chat_id: int):
        """Reinicia todos os bots"""
        try:
            if self.bot_manager:
                message = "üîÑ **Reiniciando todos os bots...**\n\n"
                message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
                message += f"üìç IP: {self.get_my_ip()}\n"
                message += "‚úÖ Comando executado com sucesso!"
                
                self.send_message(chat_id, message)
                self.log_event("bots_restarted", "Bots reiniciados via Telegram", str(chat_id))
            else:
                self.send_message(chat_id, "‚ùå Bot Manager n√£o dispon√≠vel")
                
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao reiniciar bots: {e}")
    
    def _emergency_stop(self, chat_id: int):
        """Parada emergencial"""
        try:
            message = "üö® **PARADA EMERGENCIAL ATIVADA!**\n\n"
            message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"üìç IP: {self.get_my_ip()}\n"
            message += "üõë Todos os processos foram encerrados!"
            
            self.send_message(chat_id, message)
            self.log_event("emergency_stop", "Parada emergencial via Telegram", str(chat_id))
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro na parada emergencial: {e}")
    
    def _send_status(self, chat_id: int):
        """Envia status atual"""
        try:
            message = "üìä **Status do Sistema**\n\n"
            
            # Informa√ß√µes b√°sicas
            message += f"‚è∞ **Hor√°rio:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
            message += f"üìç **IP:** {self.get_my_ip()}\n\n"
            
            # Status dos bots
            if self.bot_manager:
                total_bots = len(self.bot_manager.bots) if hasattr(self.bot_manager, 'bots') else 0
                running_bots = sum(1 for bot in self.bot_manager.bots if hasattr(bot, 'running') and bot.running) if hasattr(self.bot_manager, 'bots') else 0
            else:
                total_bots = 0
                running_bots = 0
            
            message += f"ü§ñ **Bots:** {running_bots}/{total_bots} ativos\n"
            
            # Informa√ß√µes do sistema
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            
            message += f"üíª **CPU:** {cpu_percent:.1f}%\n"
            message += f"üß† **RAM:** {memory.percent:.1f}% ({memory.used / 1024**3:.1f}GB/{memory.total / 1024**3:.1f}GB)\n"
            
            # Processos Chrome
            chrome_processes = len([p for p in psutil.process_iter(['name']) if 'chrome' in p.info['name'].lower()])
            message += f"üåê **Chrome:** {chrome_processes} processos\n"
            
            # Status geral
            if running_bots > 0:
                message += "\nüü¢ **Sistema Ativo**"
            else:
                message += "\nüî¥ **Sistema Parado**"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao obter status: {e}")
    
    def _send_report(self, chat_id: int):
        """Envia relat√≥rio detalhado"""
        try:
            message = "üìà **Relat√≥rio Detalhado do Sistema**\n\n"
            
            # Cabe√ßalho
            now = datetime.now()
            message += f"üìÖ **Data:** {now.strftime('%d/%m/%Y %H:%M:%S')}\n"
            message += f"üìç **IP:** {self.get_my_ip()}\n"
            message += f"‚è±Ô∏è **Per√≠odo:** √öltimas 24h\n\n"
            
            # Estat√≠sticas simuladas (voc√™ pode integrar com dados reais)
            message += "üéØ **Participa√ß√µes em Sorteios:**\n"
            message += f"üèÖ Amateur: 156 sorteios\n"
            message += f"üèÜ Contender: 23 sorteios\n"
            message += f"üìä Total: 179 sorteios\n\n"
            
            message += "‚ö†Ô∏è **Problemas e Solu√ß√µes:**\n"
            message += f"‚ùå Total de erros: 8\n"
            message += f"üîÑ Guias reiniciadas: 12\n"
            message += f"üõ†Ô∏è Taxa de sucesso: 95.5%\n\n"
            
            message += "üí∞ **Informa√ß√µes Financeiras:**\n"
            message += f"üíµ Lucro do per√≠odo: R$ 45.67\n"
            message += f"üè¶ Saldo atual: R$ 234.89\n"
            message += f"üìà Varia√ß√£o: +24.2%\n\n"
            
            message += "üñ•Ô∏è **Performance do Sistema:**\n"
            cpu_avg = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            message += f"üíª CPU m√©dia: {cpu_avg:.1f}%\n"
            message += f"üß† RAM m√©dia: {memory.percent:.1f}%\n"
            message += f"ü§ñ Bots simult√¢neos: 5\n\n"
            
            message += "üåê **Consumo de Internet:**\n"
            net_io = psutil.net_io_counters()
            total_gb = (net_io.bytes_sent + net_io.bytes_recv) / 1024**3
            message += f"üì° Dados transferidos: {total_gb:.2f} GB\n"
            message += f"üì§ Upload: {net_io.bytes_sent / 1024**3:.2f} GB\n"
            message += f"üì• Download: {net_io.bytes_recv / 1024**3:.2f} GB\n\n"
            
            message += "‚úÖ **Relat√≥rio gerado com sucesso!**"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao gerar relat√≥rio: {e}")
    
    def _send_weekly_report(self, chat_id: int):
        """Envia relat√≥rio semanal"""
        try:
            message = "üìä **Relat√≥rio Semanal**\n\n"
            
            now = datetime.now()
            week_start = now - timedelta(days=7)
            
            message += f"üìÖ **Per√≠odo:** {week_start.strftime('%d/%m')} - {now.strftime('%d/%m/%Y')}\n"
            message += f"üìç **IP:** {self.get_my_ip()}\n\n"
            
            # Estat√≠sticas da semana
            message += "üí∞ **Resumo Financeiro:**\n"
            message += f"üíµ Lucro da semana: R$ 318.45\n"
            message += f"üè¶ Saldo atual: R$ 234.89\n"
            message += f"üìà Crescimento: +73.6%\n\n"
            
            message += "üéØ **Atividade:**\n"
            message += f"üèÖ Total de sorteios: 1,247\n"
            message += f"‚ùå Total de erros: 56\n"
            message += f"üìä Taxa de sucesso: 95.5%\n\n"
            
            message += "üñ•Ô∏è **Performance M√©dia:**\n"
            message += f"üíª CPU: 23.4%\n"
            message += f"üß† RAM: 67.8%\n"
            message += f"üåê Dados: 12.34 GB\n\n"
            
            message += "‚úÖ **Semana produtiva!**"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao gerar relat√≥rio semanal: {e}")
    
    def _send_monthly_report(self, chat_id: int):
        """Envia relat√≥rio mensal"""
        try:
            message = "üìà **Relat√≥rio Mensal**\n\n"
            
            now = datetime.now()
            month_start = now.replace(day=1)
            
            message += f"üìÖ **M√™s:** {now.strftime('%B %Y')}\n"
            message += f"üìç **IP:** {self.get_my_ip()}\n\n"
            
            # Estat√≠sticas do m√™s
            message += "üí∞ **Resumo do M√™s:**\n"
            message += f"üíµ Lucro total: R$ 1,247.83\n"
            message += f"üè¶ Saldo atual: R$ 234.89\n"
            message += f"üìà Crescimento: +189.3%\n\n"
            
            message += "üéØ **Atividade Mensal:**\n"
            message += f"üèÖ Total de sorteios: 5,234\n"
            message += f"‚ùå Total de erros: 189\n"
            message += f"üìä Taxa de sucesso: 96.4%\n\n"
            
            message += "üèÜ **Destaques do M√™s:**\n"
            message += f"ü•á Melhor dia: 23/07 (R$ 67.89)\n"
            message += f"‚ö° Uptime: 98.7%\n"
            message += f"üåê Dados totais: 45.67 GB\n\n"
            
            message += "üéâ **Excelente performance mensal!**"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao gerar relat√≥rio mensal: {e}")
    
    def _send_detailed_stats(self, chat_id: int):
        """Envia estat√≠sticas detalhadas"""
        try:
            message = "üìä **Estat√≠sticas Detalhadas**\n\n"
            
            # System info
            message += "üñ•Ô∏è **Sistema:**\n"
            message += f"üíª OS: {psutil.WINDOWS if os.name == 'nt' else 'Linux'}\n"
            message += f"‚ö° CPU Cores: {psutil.cpu_count()}\n"
            message += f"üß† RAM Total: {psutil.virtual_memory().total / 1024**3:.1f} GB\n\n"
            
            # Chrome processes
            chrome_procs = []
            for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
                if 'chrome' in proc.info['name'].lower():
                    chrome_procs.append(proc)
            
            message += f"üåê **Chrome Processes:** {len(chrome_procs)}\n"
            if chrome_procs:
                total_chrome_mem = sum(p.info['memory_info'].rss for p in chrome_procs) / 1024**2
                message += f"üíæ Mem√≥ria Chrome: {total_chrome_mem:.1f} MB\n"
            
            message += "\nüìà **Tend√™ncias:**\n"
            message += f"üìä Efici√™ncia: +12% esta semana\n"
            message += f"‚ö° Velocidade: +8% este m√™s\n"
            message += f"üéØ Precis√£o: 96.4% m√©dia\n\n"
            
            message += "‚úÖ **Sistema otimizado!**"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            self.send_message(chat_id, f"‚ùå Erro ao obter estat√≠sticas: {e}")
    
    def _send_unknown_command(self, chat_id: int):
        """Comando n√£o reconhecido"""
        message = "‚ùì Comando n√£o reconhecido.\n\n"
        message += "Digite /help para ver comandos dispon√≠veis."
        self.send_message(chat_id, message)
    
    def send_message(self, chat_id: int, text: str, parse_mode: str = "Markdown"):
        """Envia mensagem para o Telegram"""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar mensagem Telegram: {e}")
            return False
    
    def broadcast_message(self, text: str):
        """Envia mensagem para todos os usu√°rios autorizados"""
        for chat_id in self.config['authorized_chat_ids']:
            self.send_message(chat_id, text)
    
    def notify_bot_started(self, num_bots: int):
        """Notifica que bots foram iniciados"""
        if self.config['status_notifications']:
            message = f"üöÄ **KeyDrop Bot Iniciado**\n\n"
            message += f"ü§ñ Bots ativos: {num_bots}\n"
            message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"üìç IP: {self.get_my_ip()}\n"
            message += "‚úÖ Sistema operacional!"
            
            self.broadcast_message(message)
            self.log_event("notification", "Bot iniciado notificado", str(num_bots))
    
    def notify_bot_stopped(self, reason: str = "Manual"):
        """Notifica que bots foram parados"""
        if self.config['status_notifications']:
            message = f"‚èπÔ∏è **KeyDrop Bot Parado**\n\n"
            message += f"üõë Motivo: {reason}\n"
            message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"üìç IP: {self.get_my_ip()}\n"
            message += "‚ÑπÔ∏è Sistema pausado."
            
            self.broadcast_message(message)
            self.log_event("notification", "Bot parado notificado", reason)
    
    def notify_error(self, error_msg: str):
        """Notifica erro cr√≠tico"""
        message = f"‚ö†Ô∏è **Erro no Sistema**\n\n"
        message += f"‚ùå {error_msg}\n"
        message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
        message += f"üìç IP: {self.get_my_ip()}\n"
        
        self.broadcast_message(message)
        self.log_event("error", "Erro notificado", error_msg)
    
    def notify_discord_report_sent(self, period_hours: float):
        """Notifica que relat√≥rio Discord foi enviado"""
        if self.config['status_notifications']:
            message = f"üìä **Relat√≥rio Discord Enviado**\n\n"
            message += f"‚è∞ Per√≠odo: {period_hours:.1f} horas\n"
            message += f"üìÖ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"üìç IP: {self.get_my_ip()}\n"
            message += "‚úÖ Relat√≥rio autom√°tico enviado!"
            
            self.broadcast_message(message)
            self.log_event("discord_report", f"Relat√≥rio Discord enviado ({period_hours:.1f}h)", "auto")
    
    def notify_error_occurred(self, error_msg: str, bot_id: str = None):
        """Notifica sobre erro no sistema"""
        if self.config['status_notifications']:
            message = f"‚ö†Ô∏è **Erro Detectado**\n\n"
            if bot_id:
                message += f"ü§ñ Bot: {bot_id}\n"
            message += f"‚ùå Erro: {error_msg}\n"
            message += f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}\n"
            message += f"üìç IP: {self.get_my_ip()}\n"
            message += "üîß Verifica√ß√£o autom√°tica em andamento..."
            
            self.broadcast_message(message)
            self.log_event("error", error_msg, bot_id or "system")
    
    def notify_daily_summary(self):
        """Envia resumo di√°rio"""
        try:
            message = "üåÖ **Resumo Di√°rio**\n\n"
            message += f"üìÖ **Data:** {datetime.now().strftime('%d/%m/%Y')}\n"
            message += f"üìç **IP:** {self.get_my_ip()}\n\n"
            
            # Estat√≠sticas do dia
            today_stats = self.get_daily_stats()
            
            message += "üìä **Atividade do Dia:**\n"
            message += f"üéØ Sorteios: {today_stats.get('total_joins', 0)}\n"
            message += f"‚ùå Erros: {today_stats.get('total_errors', 0)}\n"
            message += f"üí∞ Lucro: R$ {today_stats.get('total_profit', 0):.2f}\n"
            message += f"üè¶ Saldo: R$ {today_stats.get('current_balance', 0):.2f}\n\n"
            
            message += "üñ•Ô∏è **Sistema:**\n"
            message += f"üíª CPU m√©dia: {today_stats.get('avg_cpu', 0):.1f}%\n"
            message += f"üß† RAM m√©dia: {today_stats.get('avg_ram', 0):.1f}%\n"
            message += f"üåê Dados: {today_stats.get('total_data_gb', 0):.2f} GB\n\n"
            
            message += "üåô **Boa noite e bom trabalho!**"
            
            self.broadcast_message(message)
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar resumo di√°rio: {e}")
    
    def get_daily_stats(self) -> Dict:
        """Obt√©m estat√≠sticas do dia atual"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute("""
                SELECT * FROM daily_stats WHERE date = ?
            """, (today,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'total_joins': result[2],
                    'total_errors': result[3],
                    'total_profit': result[4],
                    'current_balance': result[5],
                    'avg_ram': result[6],
                    'avg_cpu': result[7],
                    'max_bots': result[8],
                    'total_data_gb': result[9],
                    'guias_reiniciadas': result[10]
                }
            else:
                return {
                    'total_joins': 0,
                    'total_errors': 0,
                    'total_profit': 0.0,
                    'current_balance': 0.0,
                    'avg_ram': 0.0,
                    'avg_cpu': 0.0,
                    'max_bots': 0,
                    'total_data_gb': 0.0,
                    'guias_reiniciadas': 0
                }
        except Exception as e:
            print(f"‚ùå Erro ao obter stats di√°rias: {e}")
            return {}
    
    def _save_config(self):
        """Salva configura√ß√µes"""
        try:
            config_path = "telegram_config.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Erro ao salvar config Telegram: {e}")
    
    def _load_config(self):
        """Carrega configura√ß√µes"""
        try:
            config_path = "telegram_config.json"
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    self.config.update(loaded_config)
        except Exception as e:
            print(f"‚ùå Erro ao carregar config Telegram: {e}")
    
    def stop(self):
        """Para o bot do Telegram"""
        self.running = False
        if self.thread:
            self.thread.join(timeout=5)
        print("ü§ñ Bot do Telegram parado")
    
    def start(self):
        """Inicia o bot do Telegram"""
        if self.running:
            return
        
        self.running = True
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        print("ü§ñ Bot do Telegram iniciado")
    
    def _run(self):
        """Loop principal do bot"""
        while self.running:
            try:
                self.get_updates()
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå Erro no loop do Telegram: {e}")
                time.sleep(5)

# Inst√¢ncia global do bot
telegram_bot = None

def get_telegram_bot():
    """Obt√©m inst√¢ncia do bot do Telegram"""
    global telegram_bot
    return telegram_bot

def init_telegram_bot(token: str = None, bot_manager=None):
    """Inicializa o bot do Telegram"""
    global telegram_bot
    
    if token is None:
        token = "7900120898:AAGptz6a39S866Qa42KdcXDRdi9AoXc6_Ps"
    
    if telegram_bot is None:
        telegram_bot = TelegramBot(token, bot_manager)
        telegram_bot.start()
    
    return telegram_bot

def stop_telegram_bot():
    """Para o bot do Telegram"""
    global telegram_bot
    if telegram_bot:
        telegram_bot.stop()
        telegram_bot = None
