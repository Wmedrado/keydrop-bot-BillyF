#!/usr/bin/env python3
"""
Sistema de Atualiza√ß√£o Autom√°tica - KeyDrop Bot (Reposit√≥rio Privado)
Busca atualiza√ß√µes no GitHub usando token de autentica√ß√£o
"""
import requests
import json
import os
import zipfile
import shutil
import subprocess
import sys
from pathlib import Path
from datetime import datetime
import tempfile
import threading
from tkinter import messagebox
import tkinter as tk

class PrivateUpdateManager:
    """Gerenciador de atualiza√ß√µes via GitHub (Reposit√≥rio Privado)"""
    
    def __init__(self, repo_owner="wmedrado", repo_name="bot-keydrop", current_version="2.0.0"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.current_version = current_version
        self.github_api = f"https://api.github.com/repos/{repo_owner}/{repo_name}"
        self.update_in_progress = False
        
        # Token de acesso pessoal do GitHub (deve ser configurado)
        self.github_token = self.get_github_token()
        self.headers = {
            "Authorization": f"token {self.github_token}",
            "Accept": "application/vnd.github.v3+json"
        } if self.github_token else {}
        
    def get_github_token(self):
        """Obt√©m o token do GitHub de diferentes fontes"""
        # M√©todo 1: Vari√°vel de ambiente
        token = os.getenv('GITHUB_TOKEN')
        if token:
            print("‚úÖ Token do GitHub encontrado via vari√°vel de ambiente")
            return token
            
        # M√©todo 2: Arquivo local - m√∫ltiplos caminhos para compatibilidade com execut√°veis
        possible_paths = [
            # Diret√≥rio raiz do projeto (quando executado como script)
            Path(__file__).parent.parent / 'github_token.txt',
            
            # Diret√≥rio atual (quando executado como execut√°vel)
            Path.cwd() / 'github_token.txt',
            
            # Diret√≥rio do execut√°vel (para PyInstaller)
            Path(sys.executable).parent / 'github_token.txt',
            
            # Diret√≥rio tempor√°rio do PyInstaller
            Path(getattr(sys, '_MEIPASS', Path.cwd())) / 'github_token.txt',
            
            # Caminhos relativos
            Path('./github_token.txt'),
            Path('../github_token.txt'),
            
            # Pasta startup (caso seja executado de l√°)
            Path('./startup/github_token.txt'),
            Path('../startup/github_token.txt')
        ]
        
        for token_file in possible_paths:
            if token_file.exists():
                try:
                    token = token_file.read_text(encoding='utf-8').strip()
                    if token and len(token) > 10:  # Valida√ß√£o b√°sica
                        print(f"‚úÖ Token do GitHub encontrado em: {token_file}")
                        return token
                except Exception as e:
                    print(f"‚ùå Erro ao ler arquivo de token {token_file}: {e}")
                    continue
                
        # M√©todo 3: Arquivo de configura√ß√£o
        config_paths = [
            Path(__file__).parent.parent / 'bot_config.json',
            Path.cwd() / 'bot_config.json',
            Path('./bot_config.json')
        ]
        
        for config_file in config_paths:
            if config_file.exists():
                try:
                    with open(config_file, 'r', encoding='utf-8') as f:
                        config = json.load(f)
                        token = config.get('github_token', '')
                        if token:
                            print("‚úÖ Token do GitHub encontrado no bot_config.json")
                            return token
                except Exception as e:
                    print(f"‚ùå Erro ao ler configura√ß√£o {config_file}: {e}")
                    continue
        
        print("‚ùå Token do GitHub n√£o encontrado!")
        print("üìù Verifique se existe o arquivo 'github_token.txt' na raiz do projeto")
        print("üîß Ou configure a vari√°vel de ambiente GITHUB_TOKEN")
        print("üîç Caminhos verificados:")
        for path in possible_paths:
            print(f"   - {path} ({'‚úÖ' if path.exists() else '‚ùå'})")
        return None
        
    def check_for_updates(self):
        """Verifica se h√° atualiza√ß√µes dispon√≠veis"""
        if not self.github_token:
            print("‚ùå Token do GitHub n√£o configurado!")
            return {
                "available": False,
                "error": "Token do GitHub n√£o configurado. Verifique o arquivo github_token.txt"
            }
            
        try:
            print("üîç Verificando atualiza√ß√µes (reposit√≥rio privado)...")
            print(f"üìÇ Reposit√≥rio: {self.repo_owner}/{self.repo_name}")
            
            # Buscar √∫ltima release no GitHub
            url = f"{self.github_api}/releases/latest"
            print(f"üåê URL da API: {url}")
            
            response = requests.get(
                url,
                headers=self.headers,
                timeout=10
            )
            
            print(f"üì° Status da resposta: {response.status_code}")
            
            if response.status_code == 200:
                release_data = response.json()
                latest_version = release_data.get("tag_name", "").replace("v", "")
                
                if self.is_newer_version(latest_version, self.current_version):
                    return {
                        "available": True,
                        "version": latest_version,
                        "changelog": release_data.get("body", "Sem changelog dispon√≠vel"),
                        "release_date": release_data.get("published_at"),
                        "assets": release_data.get("assets", [])
                    }
                else:
                    return {
                        "available": False,
                        "message": f"Vers√£o atual ({self.current_version}) est√° atualizada"
                    }
            elif response.status_code == 401:
                return {
                    "available": False,
                    "error": "Token do GitHub inv√°lido ou expirado"
                }
            elif response.status_code == 404:
                return {
                    "available": False,
                    "error": "Reposit√≥rio n√£o encontrado ou sem permiss√£o"
                }
            else:
                return {
                    "available": False,
                    "error": f"Erro HTTP {response.status_code}: {response.text}"
                }
                
        except requests.exceptions.RequestException as e:
            return {
                "available": False,
                "error": f"Erro de conex√£o: {str(e)}"
            }
        except Exception as e:
            return {
                "available": False,
                "error": f"Erro inesperado: {str(e)}"
            }
    
    def is_newer_version(self, version1, version2):
        """Compara vers√µes (version1 > version2)"""
        try:
            v1_parts = [int(x) for x in version1.split('.')]
            v2_parts = [int(x) for x in version2.split('.')]
            
            # Preencher com zeros se necess√°rio
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            return v1_parts > v2_parts
        except:
            return False
    
    def download_update(self, update_info):
        """Baixa a atualiza√ß√£o"""
        if not update_info.get("available"):
            return False
            
        try:
            # Verificar se h√° assets dispon√≠veis
            assets = update_info.get("assets", [])
            if not assets:
                print("‚ùå Nenhum asset dispon√≠vel para download")
                return False
            
            # Procurar por arquivo ZIP
            download_url = None
            for asset in assets:
                if asset.get("name", "").endswith('.zip'):
                    download_url = asset.get("url")
                    break
            
            if not download_url:
                print("‚ùå Arquivo ZIP n√£o encontrado nos assets")
                return False
            
            print(f"üì• Baixando atualiza√ß√£o v{update_info['version']}...")
            
            # Baixar arquivo
            response = requests.get(
                download_url,
                headers={**self.headers, "Accept": "application/octet-stream"},
                stream=True
            )
            
            if response.status_code == 200:
                # Salvar arquivo tempor√°rio
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.zip')
                
                for chunk in response.iter_content(chunk_size=8192):
                    temp_file.write(chunk)
                
                temp_file.close()
                
                # Extrair e aplicar atualiza√ß√£o
                return self.apply_update(temp_file.name)
                
            else:
                print(f"‚ùå Erro ao baixar: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro durante download: {e}")
            return False
    
    def apply_update(self, zip_path):
        """Aplica a atualiza√ß√£o baixada"""
        try:
            print("üîÑ Aplicando atualiza√ß√£o...")
            
            # Criar backup
            backup_dir = f"backup/backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.makedirs(backup_dir, exist_ok=True)
            
            # Arquivos importantes para backup
            important_files = [
                'bot_config.json',
                'profiles/',
                'logs/',
                'github_token.txt'
            ]
            
            for file_path in important_files:
                if os.path.exists(file_path):
                    if os.path.isdir(file_path):
                        shutil.copytree(file_path, f"{backup_dir}/{file_path}")
                    else:
                        shutil.copy2(file_path, f"{backup_dir}/{file_path}")
            
            # Extrair atualiza√ß√£o
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall('temp_update')
            
            # Encontrar pasta raiz da atualiza√ß√£o
            update_root = None
            for item in os.listdir('temp_update'):
                if os.path.isdir(f'temp_update/{item}'):
                    update_root = f'temp_update/{item}'
                    break
            
            if not update_root:
                print("‚ùå Estrutura de atualiza√ß√£o inv√°lida")
                return False
            
            # Aplicar arquivos da atualiza√ß√£o
            for root, dirs, files in os.walk(update_root):
                for file in files:
                    src = os.path.join(root, file)
                    rel_path = os.path.relpath(src, update_root)
                    dst = rel_path
                    
                    # Pular arquivos de configura√ß√£o
                    if file in ['bot_config.json', 'github_token.txt']:
                        continue
                    
                    # Criar diret√≥rio se necess√°rio
                    dst_dir = os.path.dirname(dst)
                    if dst_dir:
                        os.makedirs(dst_dir, exist_ok=True)
                    
                    # Copiar arquivo
                    shutil.copy2(src, dst)
            
            # Limpar arquivos tempor√°rios
            shutil.rmtree('temp_update')
            os.unlink(zip_path)
            
            print("‚úÖ Atualiza√ß√£o aplicada com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao aplicar atualiza√ß√£o: {e}")
            return False
    
    def update_with_gui(self, parent_window=None):
        """Atualiza com interface gr√°fica"""
        update_info = self.check_for_updates()
        
        if update_info.get("error"):
            messagebox.showerror("Erro", f"Erro ao verificar atualiza√ß√µes:\n{update_info['error']}")
            return False
        
        if not update_info.get("available"):
            messagebox.showinfo("Atualiza√ß√£o", update_info.get("message", "Nenhuma atualiza√ß√£o dispon√≠vel"))
            return False
        
        # Perguntar se deseja atualizar
        response = messagebox.askyesno(
            "Atualiza√ß√£o Dispon√≠vel",
            f"Nova vers√£o dispon√≠vel: v{update_info['version']}\n\n"
            f"Changelog:\n{update_info['changelog'][:200]}...\n\n"
            "Deseja atualizar agora?"
        )
        
        if response:
            # Iniciar atualiza√ß√£o em thread separada
            def update_thread():
                success = self.download_update(update_info)
                if success:
                    messagebox.showinfo("Sucesso", "Atualiza√ß√£o conclu√≠da!\nReinicie o bot para aplicar.")
                else:
                    messagebox.showerror("Erro", "Falha ao aplicar atualiza√ß√£o")
            
            thread = threading.Thread(target=update_thread, daemon=True)
            thread.start()
            
            return True
        
        return False

# Exemplo de uso
if __name__ == "__main__":
    updater = PrivateUpdateManager()
    
    # Verificar atualiza√ß√µes
    update_info = updater.check_for_updates()
    
    if update_info.get("available"):
        print(f"‚úÖ Atualiza√ß√£o dispon√≠vel: v{update_info['version']}")
        print(f"üìã Changelog: {update_info['changelog']}")
        
        # Baixar e aplicar
        if updater.download_update(update_info):
            print("üéâ Atualiza√ß√£o aplicada com sucesso!")
        else:
            print("‚ùå Falha na atualiza√ß√£o")
    else:
        print("‚ÑπÔ∏è Nenhuma atualiza√ß√£o dispon√≠vel")
        if update_info.get("error"):
            print(f"‚ùå Erro: {update_info['error']}")
