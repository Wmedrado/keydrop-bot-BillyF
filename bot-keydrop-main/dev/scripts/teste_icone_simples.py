#!/usr/bin/env python3
"""
Teste do √çcone - Vers√£o Simplificada
Testa se o √≠cone est√° carregando corretamente
"""

import tkinter as tk
import customtkinter as ctk
import os
import sys

def testar_icone_interface():
    """Testa o √≠cone na interface de forma simplificada"""
    print("üé® Testando √≠cone na interface...")
    
    # Configurar tema
    ctk.set_appearance_mode("dark")
    
    # Criar janela
    root = ctk.CTk()
    root.title("üîë Teste de √çcone - KeyDrop Bot")
    root.geometry("400x300")
    
    # Configurar √≠cone
    def configurar_icone():
        try:
            # Lista de poss√≠veis localiza√ß√µes do √≠cone
            possiveis_caminhos = [
                # Mesmo diret√≥rio do script/execut√°vel
                os.path.join(os.path.dirname(__file__), 'bot-icone.ico'),
                os.path.join(os.path.dirname(__file__), 'bot-icone.png'),
                
                # Diret√≥rio atual
                os.path.join(os.getcwd(), 'bot-icone.ico'),
                os.path.join(os.getcwd(), 'bot-icone.png'),
                
                # Diret√≥rio pai (3 n√≠veis acima)
                os.path.join(os.path.dirname(__file__), '..', '..', '..', 'bot-icone.ico'),
                os.path.join(os.path.dirname(__file__), '..', '..', '..', 'bot-icone.png'),
                
                # Para execut√°veis PyInstaller
                os.path.join(sys._MEIPASS if hasattr(sys, '_MEIPASS') else '.', 'bot-icone.ico'),
                os.path.join(sys._MEIPASS if hasattr(sys, '_MEIPASS') else '.', 'bot-icone.png'),
            ]
            
            print("üîç Procurando √≠cone nos seguintes locais:")
            for caminho in possiveis_caminhos:
                existe = os.path.exists(caminho)
                print(f"  {'‚úÖ' if existe else '‚ùå'} {caminho}")
                
                if existe:
                    try:
                        if caminho.endswith('.ico'):
                            root.iconbitmap(caminho)
                            print(f"‚úÖ √çcone ICO carregado de: {caminho}")
                            return True
                        elif caminho.endswith('.png'):
                            icon_image = tk.PhotoImage(file=caminho)
                            root.iconphoto(True, icon_image)
                            print(f"‚úÖ √çcone PNG carregado de: {caminho}")
                            return True
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao carregar √≠cone de {caminho}: {e}")
                        continue
            
            print("‚ö†Ô∏è Nenhum √≠cone encontrado, usando √≠cone padr√£o")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o do √≠cone: {e}")
            return False
    
    # Configurar √≠cone
    icone_carregado = configurar_icone()
    
    # Criar interface de teste
    label = ctk.CTkLabel(
        root,
        text=f"üé® Teste de √çcone\n\n{'‚úÖ √çcone carregado!' if icone_carregado else '‚ùå √çcone n√£o carregado'}\n\nVerifique a barra de t√≠tulo",
        font=ctk.CTkFont(size=16),
        justify="center"
    )
    label.pack(expand=True)
    
    # Bot√£o para fechar
    btn_fechar = ctk.CTkButton(
        root,
        text="‚úÖ Fechar",
        command=root.destroy,
        width=120
    )
    btn_fechar.pack(pady=20)
    
    # Mostrar janela
    root.mainloop()
    
    return icone_carregado

if __name__ == "__main__":
    print("üöÄ TESTE DE √çCONE")
    print("=" * 40)
    
    # Informa√ß√µes do ambiente
    print(f"üìÅ Diret√≥rio do script: {os.path.dirname(__file__)}")
    print(f"üìÅ Diret√≥rio atual: {os.getcwd()}")
    print(f"üêç Execut√°vel PyInstaller: {hasattr(sys, '_MEIPASS')}")
    if hasattr(sys, '_MEIPASS'):
        print(f"üì¶ MEIPASS: {sys._MEIPASS}")
    print()
    
    # Testar √≠cone
    sucesso = testar_icone_interface()
    
    print("\nüìä RESULTADO:")
    print(f"{'‚úÖ SUCESSO' if sucesso else '‚ùå FALHA'} - √çcone {'carregado' if sucesso else 'n√£o carregado'}")
