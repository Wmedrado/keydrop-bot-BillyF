#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste completo do modo CONTENDER com logs detalhados
üë®‚Äçüíª Desenvolvido por: Billy Franck (wmedrado)
üìû Discord: wmedrado
"""

import sys
import os
import time
import json
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio raiz do projeto ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

# Configura√ß√£o de log
LOG_DIR = Path(__file__).parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

class TestadorContender:
    """Classe para testar o modo CONTENDER"""
    
    def __init__(self):
        self.log_file = LOG_DIR / f"teste_contender_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        self.resultados = {
            'inicio': datetime.now().isoformat(),
            'etapas': [],
            'erros': [],
            'sucesso': False
        }
    
    def log(self, mensagem, nivel="INFO"):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] [{nivel}] {mensagem}"
        
        print(log_entry)
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
        
        self.resultados['etapas'].append({
            'timestamp': timestamp,
            'nivel': nivel,
            'mensagem': mensagem
        })
    
    def verificar_dependencias(self):
        """Verifica se todas as depend√™ncias est√£o instaladas"""
        self.log("üîç Verificando depend√™ncias...")
        
        try:
            import selenium
            self.log(f"‚úÖ Selenium: {selenium.__version__}")
        except ImportError:
            self.log("‚ùå Selenium n√£o est√° instalado", "ERROR")
            return False
        
        try:
            from selenium import webdriver
            self.log("‚úÖ WebDriver importado com sucesso")
        except ImportError:
            self.log("‚ùå WebDriver n√£o pode ser importado", "ERROR")
            return False
        
        # Verificar ChromeDriver
        try:
            options = webdriver.ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            
            driver = webdriver.Chrome(options=options)
            driver.quit()
            self.log("‚úÖ ChromeDriver est√° funcionando")
        except Exception as e:
            self.log(f"‚ùå ChromeDriver n√£o est√° funcionando: {e}", "ERROR")
            return False
        
        return True
    
    def verificar_profiles(self):
        """Verifica se os profiles do Chrome existem"""
        self.log("üîç Verificando profiles...")
        
        profiles_dir = Path(__file__).parent.parent.parent / "profiles"
        
        if not profiles_dir.exists():
            self.log("‚ùå Diret√≥rio de profiles n√£o encontrado", "ERROR")
            return False
        
        profiles = list(profiles_dir.glob("Profile-*"))
        
        if not profiles:
            self.log("‚ùå Nenhum profile encontrado", "ERROR")
            return False
        
        self.log(f"‚úÖ Encontrados {len(profiles)} profiles")
        
        # Verificar se pelo menos um profile tem dados
        for profile in profiles:
            if (profile / "Preferences").exists():
                self.log(f"‚úÖ Profile v√°lido encontrado: {profile.name}")
                return True
        
        self.log("‚ùå Nenhum profile v√°lido encontrado", "ERROR")
        return False
    
    def testar_importacao_contender(self):
        """Testa a importa√ß√£o do script contender"""
        self.log("üîç Testando importa√ß√£o do script contender...")
        
        try:
            from contender_corrigido import ContenderBot
            self.log("‚úÖ Script contender importado com sucesso")
            return True
        except Exception as e:
            self.log(f"‚ùå Erro ao importar script contender: {e}", "ERROR")
            return False
    
    def testar_inicializacao_bot(self):
        """Testa a inicializa√ß√£o do bot"""
        self.log("üîç Testando inicializa√ß√£o do bot...")
        
        try:
            from contender_corrigido import ContenderBot
            
            # Encontrar um profile v√°lido
            profiles_dir = Path(__file__).parent.parent.parent / "profiles"
            profile_path = None
            
            for profile in profiles_dir.glob("Profile-*"):
                if (profile / "Preferences").exists():
                    profile_path = str(profile)
                    break
            
            if not profile_path:
                self.log("‚ùå Nenhum profile v√°lido encontrado", "ERROR")
                return False
            
            self.log(f"üìÅ Usando profile: {profile_path}")
            
            # Inicializar bot
            bot = ContenderBot()
            
            # Testar inicializa√ß√£o (sem executar)
            self.log("‚úÖ Bot inicializado com sucesso")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro ao inicializar bot: {e}", "ERROR")
            return False
    
    def testar_acesso_site(self):
        """Testa o acesso ao site KeyDrop"""
        self.log("üîç Testando acesso ao site KeyDrop...")
        
        try:
            from contender_corrigido import ContenderBot
            
            # Encontrar um profile v√°lido
            profiles_dir = Path(__file__).parent.parent.parent / "profiles"
            profile_path = None
            
            for profile in profiles_dir.glob("Profile-*"):
                if (profile / "Preferences").exists():
                    profile_path = str(profile)
                    break
            
            if not profile_path:
                self.log("‚ùå Nenhum profile v√°lido encontrado", "ERROR")
                return False
            
            bot = ContenderBot()
            
            # Tentar inicializar e acessar site
            if bot.inicializar(profile_path):
                self.log("‚úÖ Bot inicializado com sucesso")
                
                # Testar acesso √† p√°gina principal
                bot.driver.get("https://key-drop.com/")
                time.sleep(3)
                
                if "key-drop" in bot.driver.current_url:
                    self.log("‚úÖ Site acessado com sucesso")
                    
                    # Limpar recursos
                    bot.chrome_fixer.limpar_recursos(bot.driver)
                    return True
                else:
                    self.log("‚ùå Site n√£o foi acessado corretamente", "ERROR")
                    bot.chrome_fixer.limpar_recursos(bot.driver)
                    return False
            else:
                self.log("‚ùå Falha ao inicializar bot", "ERROR")
                return False
            
        except Exception as e:
            self.log(f"‚ùå Erro ao testar acesso ao site: {e}", "ERROR")
            return False
    
    def executar_teste_completo(self):
        """Executa todos os testes"""
        self.log("üöÄ INICIANDO TESTE COMPLETO DO MODO CONTENDER")
        self.log("=" * 60)
        
        testes = [
            ("Verifica√ß√£o de depend√™ncias", self.verificar_dependencias),
            ("Verifica√ß√£o de profiles", self.verificar_profiles),
            ("Importa√ß√£o do script contender", self.testar_importacao_contender),
            ("Inicializa√ß√£o do bot", self.testar_inicializacao_bot),
            ("Acesso ao site", self.testar_acesso_site)
        ]
        
        sucesso_total = 0
        
        for nome, teste in testes:
            self.log(f"\nüìã {nome}...")
            
            try:
                if teste():
                    sucesso_total += 1
                    self.log(f"‚úÖ {nome}: SUCESSO")
                else:
                    self.log(f"‚ùå {nome}: FALHA", "ERROR")
                    self.resultados['erros'].append(f"{nome}: FALHA")
            except Exception as e:
                self.log(f"‚ùå {nome}: ERRO - {e}", "ERROR")
                self.resultados['erros'].append(f"{nome}: ERRO - {e}")
        
        self.log("\n" + "=" * 60)
        self.log("üìä RESULTADOS DO TESTE")
        self.log("=" * 60)
        self.log(f"‚úÖ Testes bem-sucedidos: {sucesso_total}/{len(testes)}")
        self.log(f"‚ùå Testes falhados: {len(testes) - sucesso_total}/{len(testes)}")
        
        if self.resultados['erros']:
            self.log("\nüîç ERROS ENCONTRADOS:")
            for erro in self.resultados['erros']:
                self.log(f"  ‚Ä¢ {erro}")
        
        self.resultados['sucesso'] = sucesso_total == len(testes)
        self.resultados['fim'] = datetime.now().isoformat()
        
        # Salvar resultados
        resultado_file = LOG_DIR / f"resultado_teste_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(resultado_file, 'w', encoding='utf-8') as f:
            json.dump(self.resultados, f, indent=2, ensure_ascii=False)
        
        self.log(f"\nüìÑ Log salvo em: {self.log_file}")
        self.log(f"üìÑ Resultados salvos em: {resultado_file}")
        self.log("=" * 60)
        
        return self.resultados['sucesso']

def main():
    """Fun√ß√£o principal"""
    testador = TestadorContender()
    
    try:
        sucesso = testador.executar_teste_completo()
        
        if sucesso:
            print("\nüéâ TODOS OS TESTES PASSARAM!")
            print("O modo CONTENDER est√° pronto para uso.")
            return 0
        else:
            print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!")
            print("Verifique os logs para mais detalhes.")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
