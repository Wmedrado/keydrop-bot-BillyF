```yaml
name: CI

on:
  pull_request:
  push:
    branches: [ clean-main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout do Código
        uses: actions/checkout@v4

      - name: 🚫 Verificar push direto na main
        run: python ci/check_main_push.py

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🤖 Auto rebase de branches da IA
        if: startsWith(github.ref_name, 'codex/') || startsWith(github.ref_name, 'bot/') ||
            startsWith(github.head_ref, 'codex/') || startsWith(github.head_ref, 'bot/')
        run: python ci/pre_pr_rebase.py

      - name: 🧹 Run Ruff (Lint) e Bandit (Security Audit)
        run: |
          pip install ruff bandit
          ruff check .
          bandit -r .

      - name: ✅ Validar descrição do PR
        run: python ci/validate_pr_description.py

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectKey: keydrop-bot
          organization: your-org
          args: >-
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: keydrop-bot
          SONAR_ORGANIZATION: your-org

      - name: 📄 Relatório do SonarCloud
        run: python ci/sonar_report.py

      - name: 🧪 Rodar pipeline de testes
        run: bash ci/run_pipeline.sh

      - name: 📜 Verificar histórico de decisões
        run: python ci/check_history.py

      - name: 🧪 Rodar pipeline da interface gráfica
        run: bash ci/run_ui_pipeline.sh

  staging:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout do Código
        uses: actions/checkout@v4

      - name: 🚀 Rodar pipeline de staging
        run: bash ci/run_staging_pipeline.sh
```
