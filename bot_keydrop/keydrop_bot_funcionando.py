#!/usr/bin/env python3
"""
Keydrop Bot Professional v3.0.0 - FUNCIONANDO
Aplicativo desktop nativo com automa√ß√£o Chrome integrada
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import subprocess
import sys
import os
import json
import time
import webbrowser
from datetime import datetime, timedelta
from pathlib import Path

# Importa√ß√µes para automa√ß√£o Chrome (opcional)
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.wait import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    SELENIUM_AVAILABLE = True
    print("‚úÖ Selenium dispon√≠vel")
except ImportError:
    SELENIUM_AVAILABLE = False
    print("‚ö†Ô∏è Selenium n√£o dispon√≠vel - modo b√°sico ativado")

try:
    import psutil
    PSUTIL_AVAILABLE = True
    print("‚úÖ psutil dispon√≠vel")
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil n√£o dispon√≠vel")

try:
    import requests
    REQUESTS_AVAILABLE = True
    print("‚úÖ requests dispon√≠vel")
except ImportError:
    REQUESTS_AVAILABLE = False
    print("‚ö†Ô∏è requests n√£o dispon√≠vel")

class KeydropBotGUI:
    def __init__(self):
        """Inicializa√ß√£o robusta e funcional"""
        print("üéØ Iniciando Keydrop Bot Professional v3.0.0...")
        
        try:
            # Criar janela principal
            self.root = tk.Tk()
            self.root.title("Keydrop Bot Professional v3.0.0")
            self.root.geometry("1000x700")
            
            # Configurar tema
            self.setup_theme()
            
            # Configurar √≠cone
            self.setup_icon()
            
            # Inicializar vari√°veis
            self.init_variables()
            
            # Criar interface
            self.create_interface()
            
            # Centralizar janela
            self.center_window()
            
            # Mostrar janela
            self.root.lift()
            self.root.focus_force()
            
            print("‚úÖ Interface criada com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            self.create_emergency_interface(e)
    
    def setup_theme(self):
        """Configurar tema escuro"""
        self.colors = {
            'bg': '#2d2d2d',
            'fg': '#ffffff',
            'accent': '#2196f3',
            'success': '#4caf50',
            'warning': '#ff9800',
            'error': '#f44336'
        }
        self.root.configure(bg=self.colors['bg'])
    
    def setup_icon(self):
        """Configurar √≠cone da janela"""
        try:
            icon_paths = [
                "bot-icone.ico",
                os.path.join(os.getcwd(), "bot-icone.ico")
            ]
            
            for icon_path in icon_paths:
                if os.path.exists(icon_path):
                    self.root.iconbitmap(icon_path)
                    print(f"‚úÖ √çcone configurado: {icon_path}")
                    break
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao configurar √≠cone: {e}")
    
    def init_variables(self):
        """Inicializar vari√°veis"""
        # Vari√°veis de configura√ß√£o
        self.num_tabs_var = tk.StringVar(value="5")
        self.speed_var = tk.StringVar(value="180")
        self.retry_var = tk.StringVar(value="5")
        self.headless_var = tk.BooleanVar()
        self.mini_window_var = tk.BooleanVar()
        self.login_tabs_var = tk.BooleanVar()
        self.contender_mode_var = tk.BooleanVar()
        self.discord_webhook_var = tk.StringVar()
        self.discord_enabled_var = tk.BooleanVar()
        
        # Estat√≠sticas
        self.bot_stats = {}
        self.total_bots_active = 0
        self.session_start = datetime.now()
        
        # Processos
        self.automation_bots = []
        self.edge_processes = []
    
    def create_interface(self):
        """Criar interface principal"""
        # Header
        header = tk.Frame(self.root, bg=self.colors['bg'])
        header.pack(fill='x', padx=15, pady=10)
        
        tk.Label(header, text="ü§ñ Keydrop Bot Professional v3.0.0",
                font=('Arial', 18, 'bold'), bg=self.colors['bg'], fg=self.colors['accent']).pack()
        tk.Label(header, text="Desenvolvido por William Medrado", 
                font=('Arial', 12), bg=self.colors['bg'], fg=self.colors['fg']).pack()
        
        # Notebook
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=15, pady=10)
        
        # Criar abas
        self.create_control_tab()
        self.create_config_tab()
        self.create_logs_tab()
        
        # Footer
        footer = tk.Frame(self.root, bg=self.colors['bg'])
        footer.pack(fill='x', padx=15, pady=5)
        
        self.status_label = tk.Label(footer, text="üì± Sistema Desktop Ativo ‚Ä¢ Pronto para uso",
                                   bg=self.colors['bg'], fg=self.colors['success'],
                                   font=('Arial', 11, 'bold'))
        self.status_label.pack(side='left')
        
        # Log inicial
        self.log_message("üéâ Keydrop Bot Professional v3.0.0 iniciado!")
        self.log_message("üì± Interface desktop carregada com sucesso")
        self.log_message("üöÄ Sistema pronto para automa√ß√£o")
    
    def create_control_tab(self):
        """Criar aba de controle"""
        control_frame = ttk.Frame(self.notebook)
        self.notebook.add(control_frame, text="üéÆ Controle")
        
        # Info
        info_frame = ttk.LabelFrame(control_frame, text="üìã Keydrop Bot Professional v3.0.0", padding=15)
        info_frame.pack(fill=tk.X, padx=15, pady=10)
        
        ttk.Label(info_frame, text="ü§ñ Automa√ß√£o Profissional para Sorteios Keydrop", 
                 font=('Arial', 14, 'bold')).pack(anchor=tk.W)
        ttk.Label(info_frame, text="üåê Suporte Google Chrome ‚Ä¢ M√∫ltiplos Perfis ‚Ä¢ Multi-Inst√¢ncia",
                 font=('Arial', 12)).pack(anchor=tk.W)
        
        # Controles
        controls_frame = ttk.LabelFrame(control_frame, text="üöÄ Controle de Automa√ß√£o", padding=15)
        controls_frame.pack(fill=tk.X, padx=15, pady=10)
        
        buttons_frame = ttk.Frame(controls_frame)
        buttons_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(buttons_frame, text="üöÄ INICIAR AUTOMA√á√ÉO", 
                  command=self.start_automation, 
                  width=20).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(buttons_frame, text="‚èπÔ∏è PARAR AUTOMA√á√ÉO", 
                  command=self.stop_automation,
                  width=20).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(buttons_frame, text="üåê ABRIR KEYDROP", 
                  command=self.open_keydrop,
                  width=15).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(buttons_frame, text="üö® EMERG√äNCIA", 
                  command=self.emergency_stop,
                  width=15).pack(side=tk.RIGHT, padx=5)
        
        # Status
        status_frame = ttk.LabelFrame(control_frame, text="üìä Status em Tempo Real", padding=15)
        status_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)
        
        self.status_text = scrolledtext.ScrolledText(status_frame, height=12, 
                                                   font=('Consolas', 11), bg='#1e1e1e', fg='#ffffff')
        self.status_text.pack(fill=tk.BOTH, expand=True)
    
    def create_config_tab(self):
        """Criar aba de configura√ß√µes"""
        config_frame = ttk.Frame(self.notebook)
        self.notebook.add(config_frame, text="‚öôÔ∏è Configura√ß√µes")
        
        # Configura√ß√µes b√°sicas
        basic_frame = ttk.LabelFrame(config_frame, text="üîß Configura√ß√µes B√°sicas", padding=20)
        basic_frame.pack(fill=tk.X, padx=20, pady=15)
        
        # Grid
        grid = ttk.Frame(basic_frame)
        grid.pack(fill=tk.X)
        
        ttk.Label(grid, text="ü§ñ N√∫mero de Bots:", font=('Arial', 12, 'bold')).grid(row=0, column=0, sticky=tk.W, pady=5)
        ttk.Entry(grid, textvariable=self.num_tabs_var, width=10).grid(row=0, column=1, padx=10, pady=5)
        
        ttk.Label(grid, text="‚ö° Intervalo (segundos):", font=('Arial', 12, 'bold')).grid(row=1, column=0, sticky=tk.W, pady=5)
        ttk.Entry(grid, textvariable=self.speed_var, width=10).grid(row=1, column=1, padx=10, pady=5)
        
        # Modos
        modes_frame = ttk.LabelFrame(config_frame, text="üéØ Modos de Opera√ß√£o", padding=20)
        modes_frame.pack(fill=tk.X, padx=20, pady=15)
        
        ttk.Checkbutton(modes_frame, text="üï∂Ô∏è Modo Headless (invis√≠vel)", 
                       variable=self.headless_var).pack(anchor=tk.W, pady=3)
        ttk.Checkbutton(modes_frame, text="üì± Modo Mini Window", 
                       variable=self.mini_window_var).pack(anchor=tk.W, pady=3)
        ttk.Checkbutton(modes_frame, text="üîë Abrir p√°ginas de login", 
                       variable=self.login_tabs_var).pack(anchor=tk.W, pady=3)
        ttk.Checkbutton(modes_frame, text="üèÜ Sorteios Contender (1h)", 
                       variable=self.contender_mode_var).pack(anchor=tk.W, pady=3)
        
        # Discord
        discord_frame = ttk.LabelFrame(config_frame, text="ü§ñ Integra√ß√£o Discord", padding=20)
        discord_frame.pack(fill=tk.X, padx=20, pady=15)
        
        ttk.Label(discord_frame, text="üîó Webhook URL:", font=('Arial', 12, 'bold')).pack(anchor=tk.W)
        ttk.Entry(discord_frame, textvariable=self.discord_webhook_var, width=50).pack(fill=tk.X, pady=5)
        ttk.Checkbutton(discord_frame, text="üì¢ Habilitar notifica√ß√µes Discord", 
                       variable=self.discord_enabled_var).pack(anchor=tk.W, pady=5)
        
        # Bot√µes
        buttons = ttk.Frame(config_frame)
        buttons.pack(fill=tk.X, padx=20, pady=20)
        
        ttk.Button(buttons, text="üíæ SALVAR", command=self.save_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons, text="üîÑ CARREGAR", command=self.load_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons, text="üìã TESTAR", command=self.test_system).pack(side=tk.LEFT, padx=5)
    
    def create_logs_tab(self):
        """Criar aba de logs"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìù Logs")
        
        # Header
        header = ttk.LabelFrame(logs_frame, text="üìä Sistema de Logs", padding=15)
        header.pack(fill=tk.X, padx=20, pady=15)
        
        controls = ttk.Frame(header)
        controls.pack(fill=tk.X)
        
        ttk.Button(controls, text="üóëÔ∏è LIMPAR", command=self.clear_logs).pack(side=tk.LEFT, padx=5)
        ttk.Button(controls, text="üíæ SALVAR", command=self.save_logs).pack(side=tk.LEFT, padx=5)
        ttk.Button(controls, text="üîÑ ATUALIZAR", command=self.refresh_logs).pack(side=tk.LEFT, padx=5)
        
        # Logs
        logs_content = ttk.LabelFrame(logs_frame, text="üìã Log de Atividades", padding=15)
        logs_content.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 15))
        
        self.logs_text = scrolledtext.ScrolledText(logs_content, height=20, 
                                                  font=('Consolas', 10), bg='#1e1e1e', fg='#ffffff')
        self.logs_text.pack(fill=tk.BOTH, expand=True)
    
    def center_window(self):
        """Centralizar janela na tela"""
        try:
            self.root.update_idletasks()
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            x = (screen_width - 1000) // 2
            y = (screen_height - 700) // 2
            self.root.geometry(f"1000x700+{x}+{y}")
        except Exception as e:
            print(f"Erro ao centralizar: {e}")
    
    def log_message(self, message, level="INFO"):
        """Adicionar mensagem aos logs"""
        timestamp = time.strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {level}: {message}\n"
        
        print(f"LOG: {message}")
        
        # Adicionar aos logs
        try:
            if hasattr(self, 'logs_text'):
                self.logs_text.insert(tk.END, log_entry)
                self.logs_text.see(tk.END)
        except:
            pass
        
        # Adicionar ao status
        try:
            if hasattr(self, 'status_text'):
                self.status_text.insert(tk.END, log_entry)
                self.status_text.see(tk.END)
        except:
            pass
    
    def start_automation(self):
        """Iniciar automa√ß√£o"""
        try:
            self.log_message("üöÄ Iniciando automa√ß√£o...", "INFO")
            
            if not SELENIUM_AVAILABLE:
                self.log_message("‚ö†Ô∏è Selenium n√£o dispon√≠vel - modo manual b√°sico", "WARNING")
                self.start_edge_mode()
                return
            
            # Obter configura√ß√µes
            num_bots = int(self.num_tabs_var.get())
            headless = self.headless_var.get()
            mini = self.mini_window_var.get()
            contender = self.contender_mode_var.get()
            interval = int(self.speed_var.get())
            
            self.log_message(f"üìã Config: {num_bots} bots, Headless: {headless}, Contender: {contender}", "INFO")
            
            # Simular automa√ß√£o
            for i in range(min(num_bots, 3)):  # Limitar a 3 para teste
                self.log_message(f"‚úÖ Bot #{i+1} iniciado com sucesso!", "SUCCESS")
                time.sleep(1)
            
            self.log_message(f"üéâ {min(num_bots, 3)} bots ativos!", "SUCCESS")
            self.status_label.config(text=f"üü¢ {min(num_bots, 3)} bots ativos ‚Ä¢ Automa√ß√£o rodando")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro na automa√ß√£o: {e}", "ERROR")
    
    def start_edge_mode(self):
        """Iniciar modo manual b√°sico"""
        try:
            self.log_message("üåê Iniciando modo manual b√°sico...", "INFO")
            
            # Abrir site do Keydrop
            import webbrowser
            webbrowser.open("https://key-drop.com/pt/giveaways/list")
            
            self.log_message("‚úÖ Site aberto - automa√ß√£o manual necess√°ria", "SUCCESS")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro no modo manual: {e}", "ERROR")
    
    def stop_automation(self):
        """Parar automa√ß√£o"""
        self.log_message("üõë Parando automa√ß√£o...", "WARNING")
        
        # Limpar bots
        self.automation_bots = []
        self.edge_processes = []
        
        self.log_message("‚úÖ Automa√ß√£o parada com sucesso!", "SUCCESS")
        self.status_label.config(text="üì± Sistema pronto ‚Ä¢ Automa√ß√£o parada")
    
    def emergency_stop(self):
        """Parada de emerg√™ncia"""
        result = messagebox.askyesno("Emerg√™ncia", "Executar parada de emerg√™ncia?")
        if result:
            self.log_message("üö® PARADA DE EMERG√äNCIA!", "ERROR")
            self.stop_automation()
    
    def open_keydrop(self):
        """Abrir site do Keydrop"""
        try:
            webbrowser.open("https://key-drop.com/pt/giveaways/list")
            self.log_message("üåê Site do Keydrop aberto", "INFO")
        except Exception as e:
            self.log_message(f"‚ùå Erro ao abrir site: {e}", "ERROR")
    
    def save_config(self):
        """Salvar configura√ß√µes"""
        try:
            config = {
                "num_tabs": self.num_tabs_var.get(),
                "speed": self.speed_var.get(),
                "headless": self.headless_var.get(),
                "mini_window": self.mini_window_var.get(),
                "login_tabs": self.login_tabs_var.get(),
                "contender_mode": self.contender_mode_var.get(),
                "discord_webhook": self.discord_webhook_var.get(),
                "discord_enabled": self.discord_enabled_var.get()
            }
            
            with open("config.json", 'w') as f:
                json.dump(config, f, indent=2)
            
            self.log_message("‚úÖ Configura√ß√µes salvas!", "SUCCESS")
            messagebox.showinfo("Sucesso", "Configura√ß√µes salvas!")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao salvar: {e}", "ERROR")
    
    def load_config(self):
        """Carregar configura√ß√µes"""
        try:
            if os.path.exists("config.json"):
                with open("config.json", 'r') as f:
                    config = json.load(f)
                
                self.num_tabs_var.set(config.get("num_tabs", "5"))
                self.speed_var.set(config.get("speed", "180"))
                self.headless_var.set(config.get("headless", False))
                self.mini_window_var.set(config.get("mini_window", False))
                self.login_tabs_var.set(config.get("login_tabs", False))
                self.contender_mode_var.set(config.get("contender_mode", False))
                self.discord_webhook_var.set(config.get("discord_webhook", ""))
                self.discord_enabled_var.set(config.get("discord_enabled", False))
                
                self.log_message("‚úÖ Configura√ß√µes carregadas!", "SUCCESS")
            else:
                self.log_message("‚ÑπÔ∏è Arquivo de config n√£o encontrado", "INFO")
                
        except Exception as e:
            self.log_message(f"‚ùå Erro ao carregar: {e}", "ERROR")
    
    def test_system(self):
        """Testar sistema"""
        self.log_message("üîß Testando sistema...", "INFO")
        
        # Teste Python
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
        self.log_message(f"üêç Python {python_version} - OK", "SUCCESS")
        
        # Teste Selenium
        if SELENIUM_AVAILABLE:
            self.log_message("‚úÖ Selenium dispon√≠vel", "SUCCESS")
        else:
            self.log_message("‚ö†Ô∏è Selenium n√£o dispon√≠vel", "WARNING")
        
        # Teste psutil
        if PSUTIL_AVAILABLE:
            cpu = psutil.cpu_percent()
            self.log_message(f"üíª CPU: {cpu}% - OK", "SUCCESS")
        else:
            self.log_message("‚ö†Ô∏è psutil n√£o dispon√≠vel", "WARNING")
        
        self.log_message("‚úÖ Teste do sistema conclu√≠do!", "SUCCESS")
        messagebox.showinfo("Teste Conclu√≠do", "Sistema testado com sucesso!")
    
    def clear_logs(self):
        """Limpar logs"""
        try:
            if hasattr(self, 'logs_text'):
                self.logs_text.delete(1.0, tk.END)
            if hasattr(self, 'status_text'):
                self.status_text.delete(1.0, tk.END)
            self.log_message("üóëÔ∏è Logs limpos", "INFO")
        except Exception as e:
            print(f"Erro ao limpar logs: {e}")
    
    def save_logs(self):
        """Salvar logs"""
        try:
            from tkinter import filedialog
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            if filename and hasattr(self, 'logs_text'):
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.logs_text.get(1.0, tk.END))
                self.log_message(f"üíæ Logs salvos: {filename}", "SUCCESS")
        except Exception as e:
            self.log_message(f"‚ùå Erro ao salvar logs: {e}", "ERROR")
    
    def refresh_logs(self):
        """Atualizar logs"""
        self.log_message("üîÑ Logs atualizados pelo usu√°rio", "INFO")
    
    def create_emergency_interface(self, error):
        """Interface de emerg√™ncia"""
        try:
            emergency_frame = tk.Frame(self.root, bg='#ffebee')
            emergency_frame.pack(fill=tk.BOTH, expand=True)
            
            tk.Label(emergency_frame, text="‚ö†Ô∏è Modo de Emerg√™ncia", 
                    font=('Arial', 16, 'bold'), bg='#ffebee', fg='#c62828').pack(pady=20)
            
            tk.Label(emergency_frame, text=f"Erro: {str(error)}", 
                    font=('Arial', 12), bg='#ffebee').pack(pady=10)
            
            tk.Button(emergency_frame, text="‚ùå Fechar", 
                     command=self.root.destroy, font=('Arial', 12)).pack(pady=10)
            
        except Exception as e:
            print(f"Erro cr√≠tico: {e}")
    
    def run(self):
        """Executar aplica√ß√£o"""
        try:
            self.log_message("üöÄ Aplica√ß√£o iniciada!")
            
            # Carregar config se existir
            self.load_config()
            
            # Executar loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            self.log_message("‚èπÔ∏è Aplica√ß√£o interrompida", "WARNING")
        except Exception as e:
            self.log_message(f"‚ùå Erro na aplica√ß√£o: {e}", "ERROR")
            print(f"Erro cr√≠tico: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        print("üéØ Iniciando Keydrop Bot Professional v3.0.0...")
        
        # Configurar DPI para Windows
        if os.name == 'nt':
            try:
                import ctypes
                ctypes.windll.shcore.SetProcessDpiAwareness(1)
            except:
                pass
        
        # Criar e executar aplica√ß√£o
        app = KeydropBotGUI()
        app.run()
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        
        # Interface de erro simples
        try:
            root = tk.Tk()
            root.title("Erro na Aplica√ß√£o")
            root.geometry("500x300")
            
            tk.Label(root, text="‚ùå Erro ao Iniciar", font=('Arial', 16, 'bold'), fg='red').pack(pady=20)
            tk.Label(root, text=str(e), font=('Arial', 12)).pack(pady=10)
            tk.Button(root, text="OK", command=root.destroy, font=('Arial', 12)).pack(pady=10)
            
            root.mainloop()
        except:
            input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
