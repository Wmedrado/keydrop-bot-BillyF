#!/usr/bin/env python3
"""
Script de Build para Keydrop Bot Professional v3.0.0
Gera execut√°vel otimizado com √≠cone personalizado
"""

import subprocess
import sys
import os
import shutil

def build_executable():
    """Construir execut√°vel v3.0.0 otimizado"""
    print("üî® Iniciando build do Keydrop Bot Professional v3.0.0...")
    
    # Verificar se PyInstaller est√° instalado
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller encontrado: vers√£o {PyInstaller.__version__}")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], check=True)
        print("‚úÖ PyInstaller instalado com sucesso!")
    
    # Verificar arquivos necess√°rios
    script_file = "keydrop_bot_desktop.py"
    icon_file = "bot-icone.ico"
    
    if not os.path.exists(script_file):
        print(f"‚ùå Arquivo principal n√£o encontrado: {script_file}")
        return False
    
    if not os.path.exists(icon_file):
        print(f"‚ö†Ô∏è √çcone n√£o encontrado: {icon_file}")
        print("   O execut√°vel ser√° criado sem √≠cone personalizado")
        icon_file = None
    else:
        print(f"‚úÖ √çcone encontrado: {icon_file}")
    
    # Limpar build anterior
    build_dirs = ["build", "dist", "__pycache__"]
    for dir_name in build_dirs:
        if os.path.exists(dir_name):
            print(f"üßπ Limpando diret√≥rio: {dir_name}")
            shutil.rmtree(dir_name)
    
    # Limpar arquivos .spec anteriores
    spec_files = [f for f in os.listdir(".") if f.endswith(".spec")]
    for spec_file in spec_files:
        print(f"üßπ Removendo spec antigo: {spec_file}")
        os.remove(spec_file)
    
    # Configurar comando do PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",  # Arquivo √∫nico
        "--windowed",  # Interface gr√°fica (sem console)
        "--name", "KeydropBot_Desktop_v3.0.0",  # Nome do execut√°vel
        "--clean",  # Limpeza antes do build
        "--noconfirm",  # N√£o pedir confirma√ß√£o
    ]
    
    # Adicionar √≠cone se dispon√≠vel
    if icon_file:
        cmd.extend(["--icon", icon_file])
        # Tamb√©m adicionar como dados para garantir que seja inclu√≠do
        cmd.extend(["--add-data", f"{icon_file};."])
    
    # Adicionar metadados do Windows
    if os.name == 'nt':
        cmd.extend([
            "--version-file", "version_info.txt"  # Se houver arquivo de vers√£o
        ])
    
    # Otimiza√ß√µes adicionais
    cmd.extend([
        "--optimize", "2",  # Otimiza√ß√£o Python
        "--strip",  # Remover s√≠mbolos de debug
        "--upx-dir", "upx" if shutil.which("upx") else "",  # Compress√£o UPX se dispon√≠vel
    ])
    
    # Filtrar argumentos vazios
    cmd = [arg for arg in cmd if arg]
    
    # Adicionar arquivo principal
    cmd.append(script_file)
    
    print("üöÄ Executando PyInstaller...")
    print(f"üìã Comando: {' '.join(cmd[:5])}... (simplificado)")
    
    try:
        # Executar build
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("‚úÖ Build conclu√≠do com sucesso!")
            
            # Verificar se execut√°vel foi criado
            exe_name = "KeydropBot_Desktop_v3.0.0.exe"
            exe_path = os.path.join("dist", exe_name)
            
            if os.path.exists(exe_path):
                file_size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
                print(f"üéâ Execut√°vel criado: {exe_path}")
                print(f"üìè Tamanho: {file_size:.1f} MB")
                
                # Testar se execut√°vel abre
                print("üß™ Testando execut√°vel...")
                test_result = subprocess.run([exe_path, "--version"], 
                                           capture_output=True, text=True, timeout=10)
                
                if test_result.returncode == 0:
                    print("‚úÖ Execut√°vel testado com sucesso!")
                else:
                    print("‚ö†Ô∏è Aviso: Execut√°vel criado, mas teste falhou")
                
                return True
            else:
                print("‚ùå Execut√°vel n√£o foi criado no local esperado")
                return False
        else:
            print("‚ùå Erro durante o build:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro inesperado durante build: {e}")
        return False

def create_version_info():
    """Criar arquivo de informa√ß√µes de vers√£o para Windows"""
    version_content = """
# UTF-8
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(3, 0, 0, 0),
    prodvers=(3, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'William Medrado'),
        StringStruct(u'FileDescription', u'Keydrop Bot Professional'),
        StringStruct(u'FileVersion', u'3.0.0'),
        StringStruct(u'InternalName', u'KeydropBot'),
        StringStruct(u'LegalCopyright', u'Copyright ¬© 2025 William Medrado'),
        StringStruct(u'OriginalFilename', u'KeydropBot_Desktop_v3.0.0.exe'),
        StringStruct(u'ProductName', u'Keydrop Bot Professional'),
        StringStruct(u'ProductVersion', u'3.0.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"""
    
    try:
        with open("version_info.txt", "w", encoding="utf-8") as f:
            f.write(version_content)
        print("‚úÖ Arquivo de vers√£o criado")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao criar arquivo de vers√£o: {e}")

def main():
    """Fun√ß√£o principal do build"""
    print("=" * 60)
    print("ü§ñ KEYDROP BOT PROFESSIONAL v3.0.0 - BUILD SCRIPT")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("keydrop_bot_desktop.py"):
        print("‚ùå Execute este script no diret√≥rio do projeto!")
        return
    
    # Criar arquivo de vers√£o
    create_version_info()
    
    # Executar build
    success = build_executable()
    
    if success:
        print("\n" + "=" * 60)
        print("üéâ BUILD CONCLU√çDO COM SUCESSO!")
        print("=" * 60)
        print("üìÅ Execut√°vel localizado em: dist/KeydropBot_Desktop_v3.0.0.exe")
        print("üöÄ O app est√° pronto para distribui√ß√£o!")
        print("=" * 60)
        
        # Instru√ß√µes finais
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Teste o execut√°vel manualmente")
        print("2. Verifique se o √≠cone aparece corretamente")
        print("3. Teste a automa√ß√£o do Chrome")
        print("4. Distribua o arquivo .exe")
        
    else:
        print("\n" + "=" * 60)
        print("‚ùå BUILD FALHOU!")
        print("=" * 60)
        print("üîß Verifique os erros acima e tente novamente")

if __name__ == "__main__":
    main()
