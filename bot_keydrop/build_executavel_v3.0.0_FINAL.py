#!/usr/bin/env python3
"""
Script para gerar execut√°vel do Keydrop Bot Professional v3.0.0 FINAL
Vers√£o completa com checkbox CONTENDER implementado
"""

import subprocess
import os
import shutil
from pathlib import Path

def build_executable():
    """Gerar execut√°vel usando PyInstaller"""
    print("üî® Gerando execut√°vel do Keydrop Bot Professional v3.0.0 FINAL...")
    
    try:
        # Arquivos necess√°rios
        main_file = "keydrop_bot_desktop.py"
        icon_file = "bot-icone.ico" 
        
        # Verificar arquivos
        if not os.path.exists(main_file):
            print(f"‚ùå Arquivo {main_file} n√£o encontrado!")
            return False
            
        if not os.path.exists(icon_file):
            print(f"‚ö†Ô∏è √çcone {icon_file} n√£o encontrado, continuando sem √≠cone...")
            icon_file = None
        
        # Comando PyInstaller
        cmd = [
            "pyinstaller",
            "--onefile",
            "--windowed",
            "--name=KeydropBot_v3.0.0_FINAL_CONTENDER",
            "--distpath=./dist",
            "--workpath=./build",
            "--specpath=.",
        ]
        
        # Adicionar √≠cone se existir
        if icon_file:
            cmd.extend(["--icon", icon_file])
            cmd.extend(["--add-data", f"{icon_file};."])
        
        # Adicionar arquivo principal
        cmd.append(main_file)
        
        print(f"üöÄ Executando: {' '.join(cmd)}")
        
        # Executar PyInstaller
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Execut√°vel gerado com sucesso!")
            
            # Verificar se foi criado
            exe_path = Path("dist/KeydropBot_v3.0.0_FINAL_CONTENDER.exe")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üì¶ Execut√°vel criado: {exe_path}")
                print(f"üìè Tamanho: {size_mb:.1f} MB")
                
                # Copiar √≠cone para a pasta dist se existir
                if icon_file and os.path.exists(icon_file):
                    try:
                        shutil.copy2(icon_file, "dist/")
                        print("üìã √çcone copiado para dist/")
                    except Exception:
                        pass
                
                return True
            else:
                print("‚ùå Execut√°vel n√£o foi encontrado ap√≥s build!")
                return False
        else:
            print("‚ùå Erro ao gerar execut√°vel!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante build: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üéØ Build do Keydrop Bot Professional v3.0.0 FINAL")
    print("üìã Vers√£o com checkbox CONTENDER implementado")
    print("-" * 50)
    
    # Verificar se PyInstaller est√° instalado
    try:
        subprocess.run(["pyinstaller", "--version"], capture_output=True, check=True)
        print("‚úÖ PyInstaller encontrado")
    except Exception:
        print("‚ùå PyInstaller n√£o encontrado!")
        print("üí° Instale com: pip install pyinstaller")
        return
    
    # Gerar execut√°vel
    success = build_executable()
    
    if success:
        print("\nüéâ BUILD CONCLU√çDO COM SUCESSO!")
        print("üì¶ Execut√°vel: dist/KeydropBot_v3.0.0_FINAL_CONTENDER.exe")
        print("üèÜ Checkbox CONTENDER implementado e funcional!")
        print("\n‚ñ∂Ô∏è Para testar: execute o arquivo .exe na pasta dist/")
    else:
        print("\n‚ùå BUILD FALHOU!")
        print("üîß Verifique os erros acima e tente novamente")

if __name__ == "__main__":
    main()
