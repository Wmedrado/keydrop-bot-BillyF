#!/usr/bin/env python3
"""
Build script para criar execut√°vel desktop nativo do Keydrop Bot
Gera aplica√ß√£o desktop com tkinter (sem depend√™ncia de navegador)
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# Configuration
PROJECT_ROOT = Path(__file__).parent
DIST_DIR = PROJECT_ROOT / "dist"
BUILD_DIR = PROJECT_ROOT / "build"

class DesktopExecutableBuilder:
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.spec_file = None

    def check_pyinstaller(self):
        """Check if PyInstaller is available"""
        try:
            import PyInstaller  # noqa: F401
            print("‚úÖ PyInstaller encontrado")
            return True
        except ImportError:
            print("‚ùå PyInstaller n√£o encontrado")
            print("üí° Instale com: pip install pyinstaller")
            return False

    def check_dependencies(self):
        """Verificar depend√™ncias necess√°rias"""
        print("üìã Verificando depend√™ncias...")
        
        missing = []
        required = ["psutil", "requests", "tkinter"]
        
        for dep in required:
            try:
                if dep == "tkinter":
                    import tkinter  # noqa: F401
                else:
                    __import__(dep)
                print(f"‚úÖ {dep}")
            except ImportError:
                print(f"‚ùå {dep}")
                missing.append(dep)
        
        if missing:
            print(f"üí° Instale depend√™ncias faltantes: pip install {' '.join(missing)}")
            return False
        
        return True

    def create_pyinstaller_spec(self):
        """Create PyInstaller spec file para execut√°vel desktop"""
        print("üìù Criando arquivo .spec para aplica√ß√£o desktop...")
        
        # Definir caminho do √≠cone
        icon_path = PROJECT_ROOT / "bot-icone.ico"
        
        spec_content = f'''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    [r'{PROJECT_ROOT / "keydrop_bot_desktop.py"}'],
    pathex=[r'{PROJECT_ROOT}'],
    binaries=[],
    datas=[
        (r'{PROJECT_ROOT / "backend"}', 'backend'),
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.scrolledtext',
        'tkinter.filedialog',
        'psutil',
        'requests',
        'json',
        'threading',
        'subprocess',
        'pathlib',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'numpy',
        'scipy',
        'pandas',
        'PIL',
        'cv2',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='KeydropBot_Desktop',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,  # TEMPOR√ÅRIO: Console para debug
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=ICON_PATH,
)  # Removido: console=True
'''
        # Criar execut√°vel de diagn√≥stico tamb√©m
        diagnostico_spec_content = f'''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    [r'{PROJECT_ROOT / "diagnostico_completo.py"}'],
    pathex=[r'{PROJECT_ROOT}'],
    binaries=[],
    datas=[],
    hiddenimports=[
        'tkinter',
        'tkinter.messagebox',
        'psutil',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    exclude_binaries=False,
    name='DiagnosticoBot',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=True,  # IMPORTANTE: Console para debug
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=ICON_PATH,
)  # Mantido: console=True
'''
        
        # Criar arquivo spec para diagn√≥stico
        diagnostico_spec_file = PROJECT_ROOT / "diagnostico.spec"
        icon_exists = os.path.exists(icon_path)
        icon_value = f"r'{icon_path}'" if icon_exists else "None"
        diagnostico_spec_content = diagnostico_spec_content.replace("ICON_PATH", icon_value)
        
        with open(diagnostico_spec_file, 'w', encoding='utf-8') as f:
            f.write(diagnostico_spec_content)
        
        print(f"‚úÖ Arquivo spec diagn√≥stico criado: {diagnostico_spec_file}")
        
        # Build diagn√≥stico
        try:
            cmd_diag = [
                sys.executable, "-m", "PyInstaller", 
                "--clean", str(diagnostico_spec_file)
            ]
            
            result_diag = subprocess.run(cmd_diag, 
                                       capture_output=True, 
                                       text=True, 
                                       cwd=self.project_root)
            
            if result_diag.returncode == 0:
                print("‚úÖ Execut√°vel de diagn√≥stico criado!")
                # Verificar se o execut√°vel foi criado
                diag_exe_path = DIST_DIR / "DiagnosticoBot.exe"
                if diag_exe_path.exists():
                    print(f"üì¶ Execut√°vel de diagn√≥stico: {diag_exe_path}")
                else:
                    print("‚ùå Execut√°vel de diagn√≥stico N√ÉO foi criado!")
            else:
                print("‚ö†Ô∏è  Erro no diagn√≥stico, mas continuando...")
        except Exception as e:
            print(f"‚ùå Erro no build diagn√≥stico: {e}")
        
        # Limpar arquivo spec diagn√≥stico
        try:
            diagnostico_spec_file.unlink()
        except Exception:
            pass
        
        # Agora criar o spec principal
        spec_file = PROJECT_ROOT / "keydrop_desktop.spec"
        
        # Substituir o placeholder do √≠cone
        icon_exists = os.path.exists(icon_path)
        icon_value = f"r'{icon_path}'" if icon_exists else "None"
        spec_content = spec_content.replace("ICON_PATH", icon_value)
        
        with open(spec_file, 'w', encoding='utf-8') as f:
            f.write(spec_content)
        
        self.spec_file = spec_file
        print(f"‚úÖ Arquivo spec criado: {spec_file}")
        return spec_file

    def build_executable(self):
        """Build the desktop executable using PyInstaller"""
        print("üî® Construindo execut√°vel desktop...")
        
        if not self.spec_file:
            print("‚ùå Arquivo .spec n√£o encontrado")
            return False
        
        try:
            # Change to project directory
            os.chdir(self.project_root)
            
            # Run PyInstaller
            cmd = [
                sys.executable, "-m", "PyInstaller",
                "--clean",
                "--noconfirm",
                str(self.spec_file)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Execut√°vel desktop constru√≠do com sucesso!")
                
                # Check if executable exists
                exe_path = DIST_DIR / "KeydropBot_Desktop.exe"
                if exe_path.exists():
                    print(f"üì¶ Execut√°vel criado: {exe_path}")
                    print(f"üìä Tamanho: {exe_path.stat().st_size / (1024*1024):.1f} MB")
                    return True
                else:  # Adicionado: Mensagem mais clara se o execut√°vel n√£o for encontrado
                    print("‚ùå Execut√°vel n√£o encontrado ap√≥s build")
                    return False
            else:
                print(f"‚ùå Erro no build: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro durante build: {e}")
            return False

    def cleanup(self):
        """Clean up build artifacts"""
        print("üßπ Limpando arquivos tempor√°rios...")
        
        # Remove build directory
        if BUILD_DIR.exists():
            shutil.rmtree(BUILD_DIR)
            print("‚úÖ Diret√≥rio build removido")
        
        # Remove spec file
        if self.spec_file and self.spec_file.exists():
            self.spec_file.unlink()
            print("‚úÖ Arquivo .spec removido")

    def create_launcher_script(self):
        """Criar script de lan√ßamento simples"""
        launcher_content = """@echo off
title Keydrop Bot Professional v2.1.0 - Desktop
echo.
echo ===============================================
echo   Keydrop Bot Professional v2.1.0
echo   Aplicacao Desktop Nativa
echo   Desenvolvido por: William Medrado (wmedrado)
echo ===============================================
echo.
echo üöÄ Iniciando aplicacao desktop...
echo.

REM Executar o bot desktop
"%~dp0KeydropBot_Desktop.exe"

if errorlevel 1 (
    echo.
    echo ‚ùå Erro ao executar aplicacao
    echo üí° Verifique se todos os arquivos estao presentes
    echo.
    pause
) else (
    echo.
    echo ‚úÖ Aplicacao finalizada normalmente
)
"""
        
        launcher_file = DIST_DIR / "Iniciar_Bot_Desktop.bat"
        with open(launcher_file, 'w', encoding='utf-8') as f:
            f.write(launcher_content)
        
        print(f"‚úÖ Script de lan√ßamento criado: {launcher_file}")

    def create_readme(self):
        """Create desktop app README"""
        readme_content = f"""# Keydrop Bot Professional v2.1.0 - Desktop
## Aplica√ß√£o Desktop Nativa (Sem Navegador)

### Informa√ß√µes do Build:
- **Vers√£o:** 2.1.0 Desktop
- **Data:** {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Desenvolvedor:** William Medrado (wmedrado)
- **Tipo:** Aplica√ß√£o Desktop Nativa (tkinter)

### Como Usar:
1. **Execute `Iniciar_Bot_Desktop.bat`** OU `KeydropBot_Desktop.exe`
2. A interface gr√°fica abrir√° automaticamente
3. Clique em "üöÄ Iniciar Servidor" para ativar o backend
4. Configure as op√ß√µes na aba "‚öôÔ∏è Configura√ß√µes"
5. Use os controles na aba "üéÆ Controle"
6. Monitore o progresso nas abas "üìä Estat√≠sticas" e "üìù Logs"

### Caracter√≠sticas:
- ‚úÖ **Aplica√ß√£o Desktop Nativa** - N√£o precisa de navegador
- ‚úÖ **Interface Gr√°fica Moderna** - tkinter com 4 abas
- ‚úÖ **Controle Completo** - Iniciar/parar servidor quando necess√°rio
- ‚úÖ **Monitoramento em Tempo Real** - CPU, RAM, Disco
- ‚úÖ **Todas as Funcionalidades** - 96% dos requisitos implementados

### Abas Dispon√≠veis:
1. **üéÆ Controle** - Iniciar/parar servidor, controlar bot, status
2. **‚öôÔ∏è Configura√ß√µes** - N√∫mero de guias, velocidade, op√ß√µes avan√ßadas
3. **üìä Estat√≠sticas** - Performance do sistema, estat√≠sticas do bot
4. **üìù Logs** - Logs detalhados, salvar/limpar logs

### Requisitos:
- Windows 10/11
- Chrome/Chromium instalado
- Conex√£o com internet

### Vantagens vs Vers√£o Web:
- ‚úÖ N√£o abre navegador automaticamente
- ‚úÖ Controle total sobre quando iniciar servidor
- ‚úÖ Interface nativa do sistema operacional
- ‚úÖ Menor consumo de recursos
- ‚úÖ Logs integrados na aplica√ß√£o

### Suporte:
GitHub: https://github.com/wmedrado

### Solu√ß√£o Completa:
Este execut√°vel resolve o problema do loop infinito e oferece:
- Controle manual do servidor (s√≥ inicia quando voc√™ quiser)
- Interface desktop nativa conforme requisitos
- Todas as funcionalidades do bot implementadas
- Monitoramento e controle integrados
"""
        
        readme_file = DIST_DIR / "README_DESKTOP.md"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"‚úÖ Documenta√ß√£o criada: {readme_file}")

def main():
    """Main build process"""
    print("üöÄ Keydrop Bot Professional - Build Desktop Native")
    print("=" * 60)
    
    builder = DesktopExecutableBuilder()
    
    # Check dependencies
    if not builder.check_pyinstaller():
        sys.exit(1)
    
    if not builder.check_dependencies():
        sys.exit(1)
    
    try:
        # Create spec file
        builder.create_pyinstaller_spec()
        
        # Build executable
        if builder.build_executable():
            # Create launcher and docs
            builder.create_launcher_script()
            builder.create_readme()
            
            print("\nüéâ Build desktop conclu√≠do com sucesso!")
            print(f"üìÅ Execut√°vel dispon√≠vel em: {DIST_DIR}")
            print("\nüí° Para usar:")
            print("1. Execute 'Iniciar_Bot_Desktop.bat'")
            print("2. Interface gr√°fica abrir√°")
            print("3. Clique 'Iniciar Servidor' quando quiser usar")
            print("4. Configure e controle tudo pela interface")  # Mantido: Instru√ß√µes claras
        else:
            print("\n‚ùå Falha no build")
            sys.exit(1)
    
    except KeyboardInterrupt:
        print("\nüõë Build cancelado pelo usu√°rio")
        sys.exit(1)
    
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
    
    finally:
        # Cleanup
        builder.cleanup()

if __name__ == "__main__":
    main()
